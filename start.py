# BeaconMC installation and boot file

# Import
import os

# DON'T TOUCH
VERSION = "Alpha-dev"
dico = '{\n    "banned-ips.json": \'{}\',\n    "banned-players.json": \'{}\',\n    "config.json": \'{\\n    "whitelist": false,\\n    "max_players": 10,\\n    "motd": "Welcome to BeaconMC !",\\n    "online_mode": true,\\n    "default_gamemode": "survival",\\n    "enforce_offline_profiles": true,\\n    "packet_enforcement_level": 1,\\n    "lang": "en_us",\\n    "debug_mode": true, \\n    "ip": "0.0.0.0", \\n    "port": 25565, \\n    "prevent_proxy_connexion": true,\\n    "server_id": "an_id_this_config_is_temporary",\\n    "links": {\\n        "bug_report": "https://github.com/BeaconMCDev/BeaconMC/issues/new?assignees=&labels=bug&projects=&template=bug_report.md&title=",\\n        "community_guideline": "", \\n        "support": "https://discord.gg/pxkT9dtuN8", \\n        "status": "", \\n        "feedback": "",\\n        "community": "https://discord.gg/pxkT9dtuN8", \\n        "website": "https://beaconmcdev.github.io/BeaconMC",\\n        "forums": "https://discord.gg/pxkT9dtuN8", \\n        "news": "https://discord.gg/pxkT9dtuN8", \\n        "announcements": "https://discord.gg/pxkT9dtuN8"\\n    }\\n}\',\n    "eula.txt": \'# Please accept the Minecraft EULA to run server\\n# You can read the terms here : \\n# https://www.minecraft.net/en-us/eula\\neula=false\\n\',\n    "LICENSE.md": \'# BeaconMC License\\n\\nVersion 1.0 - August 2024\\n\\n## 1. Purpose of the License\\n\\nThis license applies to BeaconMC, a Minecraft server project written in Python (the "Software"). By downloading, using, modifying, or redistributing this Software, you agree to the following terms and conditions.\\n\\n## 2. Granted Rights\\n\\nSubject to the conditions of this license, you are permitted to:\\n\\n- Use the Software without restrictions.\\n- Redistribute the Software to third parties, provided the terms of this license are respected.\\n\\n## 3. Specific Conditions\\n\\n- Acceptance of the Minecraft EULA: You must accept and comply with Minecraft\\\'s End User License Agreement (EULA) to use this Software. Any use or modification of the Software must not circumvent the Minecraft EULA (you can read it here: https://www.minecraft.net/en-us/eula).\\n- Modification: You are allowed to modify the Software, provided that such modifications do not in any way circumvent the Minecraft EULA.\\n- Copyright Notice: Any use, modification, or redistribution of the Software must include a clear and visible mention of the original authors, including their username in the copyright notices.\\n- Retention of the License: This license must be retained in its entirety with any redistributed or modified code. You are not permitted to remove or alter this license.\\n\\n## 4. Disclaimer of Warranty\\n\\nThe Software is provided "as is," without any warranty, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose, or non-infringement. You assume all risks associated with the use of the Software.\\n\\n## 5. Limitation of Liability\\n\\nIn no event shall the author or contributors of the Software be liable for any damages, direct or indirect, arising from the use or inability to use the Software, even if the author or contributors have been advised of the possibility of such damages.\\n\\n## 6. Acceptance of the License\\n\\nBy using this Software, you agree to be bound by the terms of this license.\\n\',\n    "main.py": \'r""" BeaconMC - Python 3\\n\\n____________________________________________________________\\n  ____  ______          _____ ____  _   _ __  __  _____     |\\n |  _ \\\\|  ____|   /\\\\   / ____/ __ \\\\| \\\\ | |  \\\\/  |/ ____|    |\\n | |_) | |__     /  \\\\ | |   | |  | |  \\\\| | \\\\  / | |         |\\n |  _ <|  __|   / /\\\\ \\\\| |   | |  | | . ` | |\\\\/| | |         |\\n | |_) | |____ / ____ \\\\ |___| |__| | |\\\\  | |  | | |____     |\\n |____/|______/_/    \\\\_\\\\_____\\\\____/|_| \\\\_|_|  |_|\\\\_____|    |\\n                                                            |\\n____________________________________________________________|\\n\\n    Source for dev :\\n    - https://wiki.vg\\nThis project is under the LICENSE.md license."""\\n\\n# IMPORTS - LIBRAIRIES\\nimport math\\nimport socket as skt\\nimport time as tm\\nimport random as rdm\\nfrom typing import Literal\\nfrom libs.cryptography_system.system import CryptoSystem as Crypto\\nfrom src.events.manager import EventManager\\nfrom cryptography.hazmat.primitives import serialization, hashes\\nimport threading as thread\\nimport os\\nimport sys\\nimport subprocess\\nimport hashlib\\nimport platform\\nimport pluginapi\\nimport json\\nfrom libs import mojangapi as m_api\\nimport struct\\nimport uuid\\nimport traceback\\nimport requests\\nfrom base64 import b64encode\\nfrom libs import crash_gen\\nimport string\\nimport select\\nimport functools\\ntry:\\n    import nbtlib\\nexcept ModuleNotFoundError:\\n    print("Installing missing library...")\\n    subprocess.check_call([sys.executable, "-m", "pip", "install", "nbtlib"])\\n    import nbtlib\\n    print("Done")\\n\\n\\ndt_starting_to_start = tm.time()\\nlthr = []\\n\\nif __name__ != "__start__":\\n    print("Please start the server with start.py")\\n    exit(0)\\n\\n# BASE ERROR\\nclass OSNotCompatibleError(OSError):\\n    pass\\n\\nclass ConfigurationError(Exception):\\n    pass\\n    \\nclass ProtocolError(Exception):\\n    pass\\n\\nprint(r"""\\n      \\n\\n  ____  ______          _____ ____  _   _ __  __  _____ \\n |  _ \\\\|  ____|   /\\\\   / ____/ __ \\\\| \\\\ | |  \\\\/  |/ ____|\\n | |_) | |__     /  \\\\ | |   | |  | |  \\\\| | \\\\  / | |     \\n |  _ <|  __|   / /\\\\ \\\\| |   | |  | | . ` | |\\\\/| | |     \\n | |_) | |____ / ____ \\\\ |___| |__| | |\\\\  | |  | | |____ \\n |____/|______/_/    \\\\_\\\\_____\\\\____/|_| \\\\_|_|  |_|\\\\_____|\\n""")\\nprint("       (c) BeaconMCDev 2024-2025\\\\n\\\\n")\\n\\n# Load configuration\\n_CONFIG = json.loads(open("config.json", "r").read())\\nwhitelist = _CONFIG["whitelist"]\\nMOTD = _CONFIG["motd"]\\nPORT = _CONFIG["port"]\\nIP = _CONFIG["ip"]\\nMAX_PLAYERS = _CONFIG["max_players"]\\nONLINE_MODE = _CONFIG["online_mode"]\\nlang = _CONFIG["lang"]\\nDEBUG = _CONFIG["debug_mode"]\\nENFORCE_OFFLINE_PROFILES = _CONFIG["enforce_offline_profiles"]\\nPREVENT_PROXY_CONNEXION = _CONFIG["prevent_proxy_connexion"]\\nSERVER_LINKS = _CONFIG["links"]\\nSERVER_ID = _CONFIG["server_id"]\\n_dgm = _CONFIG["default_gamemode"]\\ndefault_gamemode = 0\\nif _dgm == "survival":\\n    default_gamemode = 0\\nelif _dgm == "creative":\\n    default_gamemode = 1\\nelif _dgm == "adventure":\\n    default_gamemode = 2\\nelif _dgm == "spectator":\\n    default_gamemode = 3\\nelse:\\n    raise ConfigurationError(f"Unknown provided gamemode \\\'{_dgm}\\\' for entry \\\'default_gamemode\\\'.")\\n\\nCOMPATIBLE_OS = ["Windows", "Linux"]\\nOS = platform.system()\\nSERVER_ID = "BeaconMC-" + "".join(rdm.choice(string.ascii_letters + string.digits) for _ in range(10))\\nif OS in COMPATIBLE_OS:\\n    if OS == "Linux":\\n        SEP = \\\'/\\\'\\n    elif OS == "Windows":\\n        SEP = "\\\\\\\\"\\nelse:\\n    raise OSNotCompatibleError(f"OS {OS} is not compatible ! Please use Linux or Windows !")\\n\\n\\n# GLOBAL DATAS - VARIABLES\\nconnected_players = 0\\nblacklisted = []\\nwhitelisted = []\\n# whitelist = True\\nusers = []\\nlogfile = ""\\nstate = "OFF"\\n\\n# GLOBAL DATAS - CONSTANTS\\n# ################################\\n# ##          READ THIS       ####\\n# ## don\\\'t touch this section ####\\n# ################################\\n\\nSERVER_VERSION = "Alpha-dev"    # Version of the server. For debug\\nCLIENT_VERSION = "1.21.8"       # Which version the client must have to connect\\nPROTOCOL_VERSION = 772          # Protocol version beetween server and client. See https://minecraft.fandom.com/wiki/Protocol_version?so=search for details.\\nSALT_CHAR = "a-z-e-r-t-y-u-i-o-p-q-s-d-f-g-h-j-k-l-m-w-x-c-v-b-n-A-Z-E-R-T-Y-U-I-O-P-Q-S-D-F-G-H-J-K-L-M-W-X-C-V-B-N-0-1-2-3-4-5-6-7-8-9".split("-")\\nSALT = \\\'\\\'.join(rdm.choice(SALT_CHAR) for i in range(15))\\nCONFIG_TO_REQUEST = {"\\\\u00A7": "\\\\xc2\\\\xa7", "§": "\\\\xc2\\\\xa7"}\\n# log counts\\nerrors = 0\\nwarnings = 0\\ndebug = 0\\ninfo = 0\\ncritical = 0\\nunknow = 0\\n\\nprint("")\\n\\ndef gettime():\\n    return tm.asctime(tm.localtime(tm.time())).split(" ")[-2]\\n\\n\\ndef be_ready_to_log():\\n    global logfile\\n    nb = 1\\n    while os.path.exists(f"logs/log{nb}.log"):\\n        nb += 1\\n    logfile = f"logs/log{nb}.log"\\n\\n\\ndef encode(msg: str):\\n    """Convert quickly a string into bytes that will be sended to the client."""\\n    return msg.encode()\\n\\n\\n# #######################################################################################################################################################################################################################\\n# #######################################################################################################################################################################################################################\\n# #######################################################################################################################################################################################################################\\n# CLASSES\\nclass MCServer(object):\\n    """Minecraft server class"""\\n    SERVER_VERSION = SERVER_VERSION\\n    CLIENT_VERSION = CLIENT_VERSION\\n    PROTOCOL_VERSION = PROTOCOL_VERSION\\n    PORT = PORT\\n    IP = IP\\n    ONLINE_MODE = ONLINE_MODE\\n\\n    def __init__(self):\\n        """Init the server"""\\n        self._console = Console(self)\\n\\n        self.gui_thr = thread.Thread(target=self._console.mainthread, daemon=True)\\n        self.gui_thr.start()\\n        lthr.append(self.gui_thr)\\n        self.socket = skt.socket(skt.AF_INET, skt.SOCK_STREAM)  # socket creation\\n        self.socket.bind((IP, PORT))            # bind the socket\\n        self.list_info = []\\n        self.list_clients = []\\n        self.list_worlds = []\\n        self.crypto_sys = Crypto(self)\\n        self._eventManager = EventManager(self)\\n\\n    def EventHandler(self, plugin, event:str):\\n        """A decorator to register plugins\\\' event handlers methods"""\\n        def decorator(func):\\n            func._mc_event = event\\n            func._plugin = plugin\\n            self._eventManager.register(plugin, event, func)\\n            @functools.wraps(func)\\n            def wrapper(plugin_self, *args, **kwargs):\\n                if plugin_self._enabled:\\n                    try:\\n                        return func(plugin_self, *args, **kwargs)\\n                    except Exception as e:\\n                        plugin_self.server.getConsole().log(f"An error occured while running event method {func.__name__} from plugin {plugin.NAME}:\\\\n{traceback.format_exc()}", 2)\\n                         plugin_self._enabled = False\\n            return wrapper\\n        return decorator\\n        \\n    def is_op(self, uuid:str, username:str=None):\\n        """Checks if a user is an operator.\\n        Returns the operator level or -1 if the player isn\\\'t an operator."""\\n        \\n        with open("ops.json", "r") as opFile:\\n            data = json.loads(opFile.read())\\n        for op in data:\\n            if op["uuid"] == uuid:\\n                if not(op["name"] == username) and not(username == None):\\n                     data.remove(op)\\n                     op["name"] = username\\n                     data.append(op)\\n                     with open("ops.json", "w") as opFile:\\n                        opFile.write(json.dumps(data))\\n                return op["level"]\\n        return -1\\n        \\n\\n    def worlds_analyse(self):\\n        """Search for worlds in the worlds folder.\\n        Return a list str that are the world name."""\\n        self.getConsole().log("Analysing worlds...", 3)\\n        items_list = os.listdir(f"{os.getcwd()}{SEP}worlds")\\n        lst_world = []\\n        for item in items_list:\\n            try:\\n                name, extention = item.split(".")\\n            except ValueError:\\n                continue\\n            if extention == ".mcworld":\\n                lst_world.append(name)\\n        self.getConsole().log(f"{len(lst_world)} worlds found !", 3)\\n        return lst_world\\n\\n    def log(self, msg: str, type: int = -1):\\n        """An alternative of main.log(). Don\\\'t delete, used by plugins."""\\n        raise DeprecationWarning("This function is deprecated, please use <server>.getConsole().log() instead.")\\n        self.getConsole().log(msg, type)\\n        \\n    def kick(self, client, reason="Kicked by an operator"):\\n        if isinstance(client, Client):\\n            if client in self.list_clients:\\n                if client.connected:\\n                    self.getConsole().log(f"Kicking {client.username} ({client.uuid}): {reason}")\\n                    client.disconnect(reason)\\n                    return True\\n                else:\\n                    self.getConsole().log(f"Failed to kick {client.username}: client not connected.", 1)\\n                    return False\\n            else:\\n                self.getConsole().log(f"Failed to kick {client.username}: client not registered.", 1)\\n                return False\\n        else:\\n            self.getConsole().log(f"Failed to kick {client}: not a Client instance.", 2)\\n            return False\\n\\n    def banip(self, ip:str=None, client:object=None, username:str=None, reason:str="Banned by an operator"):\\n        if ip != None:\\n            with open("banned-ips.json", "r") as f:\\n                data = json.loads(f.read())\\n            \\n            data.append(\\n                {\\n                    "ip": ip, \\n                    "reason": reason\\n                    # other info soon ?\\n                }\\n            )\\n\\n            with open("banned-ips.json", "w") as f:\\n                f.write(json.dumps(data))\\n        elif client != None:\\n            with open("banned-ips.json", "r") as f:\\n                data = json.loads(f.read())\\n            \\n            data.append(\\n                {\\n                    "ip": client.info, \\n                    "reason": reason\\n                    # other info soon ?\\n                }\\n            )\\n\\n            with open("banned-ips.json", "w") as f:\\n                f.write(json.dumps(data))\\n        elif username != None:\\n            with open("banned-ips.json", "r") as f:\\n                data = json.loads(f.read())\\n            i = 0\\n            for c in self.list_clients:\\n                if c.username == username:\\n                    client = c\\n                    i += 1\\n            if i > 1:\\n                raise TwoPlayerWithSameUsernameException()\\n            elif i == 0:\\n                self.getConsole().log(f"Failed to kick {username}: player not found.", 1)\\n                return\\n            elif i == 1:\\n                pass\\n            else:\\n                raise Exception("An unknow exception occured.")\\n            \\n            data.append(\\n                {\\n                    "ip": c.info, \\n                    "reason": reason\\n                    # other info soon ?\\n                }\\n            )\\n\\n            with open("banned-ips.json", "w") as f:\\n                f.write(json.dumps(data))\\n\\n    def start(self):\\n        try:\\n            global state\\n            """Start the server"""\\n            self.getConsole().log("Starting Minecraft server...", 0)\\n            state = "ON"\\n            self.getConsole().log(f"Server version: {SERVER_VERSION}", 3)\\n            self.getConsole().log(f"MC version: {CLIENT_VERSION}", 3)\\n            self.getConsole().log(f"Protocol version: {PROTOCOL_VERSION}", 3)\\n            # WARNING - ANY MODIFICATION IN THIS SECTION WILL GET YOU NOT HELPABLE, PLEASE READ LICENSE.md.\\n            try:\\n                with open("eula.txt", "r") as eula_file:\\n                    eula = eula_file.read().split()\\n                    if "eula=true" in eula:\\n                        pass\\n                    else:\\n                        # WARNING - ANY MODIFICATION IN THIS SECTION WILL GET YOU NOT HELPABLE, PLEASE READ LICENSE.md.\\n                        self.getConsole().log("You need to agree the Minecraft EULA to continue.", 1)\\n                        self.getConsole().log("The conditions are readable here : https://www.minecraft.net/fr-ca/eula. To accept it, go to eula.txt and write \\\'eula=true\\\'.", 1)\\n                        self.getConsole().log("The server will not start until the EULA is not accepted, and if this script is modified we will not support or help you.", 1)\\n                        self.stop(False, reason="You need to accept Minecraft eula to continue.")\\n                        return\\n            except Exception as e:\\n                self.getConsole().log(traceback.format_exc(e), 2)\\n                # WARNING - ANY MODIFICATION IN THIS SECTION WILL GET YOU NOT HELPABLE, PLEASE READ LICENSE.md.\\n                self.getConsole().log("The eula.txt file was not found, or the server was modified !", 1)\\n                self.getConsole().log("You need to agree the Minecraft EULA to continue.", 1)\\n                self.getConsole().log("The conditions are readable here : https://www.minecraft.net/fr-ca/eula. To accept it, go to eula.txt and write \\\'eula=true\\\'.", 1)\\n                self.getConsole().log("The server will not start until the EULA is not accepted, and if this script is modified we will not support or help you.", 1)\\n                self.stop(False, reason="You need to agree eula to continue.")\\n                return\\n            # self.heartbeat()\\n\\n            self.getConsole().log("Loading plugins... (REMOVED)", 0)\\n            self.load_plugins()\\n\\n            self.getConsole().log("Starting listening...", 0)\\n            self.socket.listen(MAX_PLAYERS + 1)  # +1 is for the temp connexions\\n\\n            self.load_worlds()\\n\\n            self.act = thread.Thread(target=self.add_client_thread)\\n            self.act.start()\\n            lthr.append(self.act)\\n\\n            self.main()\\n        except Exception as e:\\n            self.stop(critical=True, reason="An unknow exception occured.", e=e)\\n\\n    def getConsole(self):\\n        return self._console\\n\\n    def load_plugins(self):\\n        """Load the plugins"""\\n        self.plugin_loader = pluginapi.PluginLoader(server=self)\\n        self.plugin_loader.load_plugins()\\n\\n    def load_worlds(self):\\n        """Load all of the server\\\'s worlds"""\\n        self.getConsole().log("Loading worlds...", 0)\\n        pre_list_worlds = self.worlds_analyse()\\n        for world in pre_list_worlds:\\n            w_class = World(world)\\n            w_class.load()\\n            self.list_worlds.append(w_class)\\n        self.getConsole().log(f"DONE ! Server successfully started on {round(tm.time() - dt_starting_to_start, 2)} seconds.", 0)\\n\\n    def main(self):\\n        """Main"""\\n        global state\\n        try:\\n            while state == "ON":\\n                tm.sleep(0.1)\\n                for p in self.list_clients:\\n                    p: Client\\n                    if not p.connected:\\n                        self.list_clients.remove(p)\\n        except KeyboardInterrupt:\\n            self.stop()\\n            exit(0)\\n\\n    def stop(self, critical_stop=False, reason="Server closed", e: Exception=None):\\n        """stop the server"""\\n        if critical_stop:\\n            self.getConsole().log("Critical server stop trigered !", 100)\\n        self.getConsole().log("Stopping the server...", 0)\\n        global state\\n        state = "OFF"\\n        global lthr\\n        self.getConsole().log("Disconnecting all the clients...", 0)\\n        if critical_stop:\\n            for i in self.list_clients:\\n                i: Client\\n                i.disconnect(reason=tr.key("disconnect.server.crash"))\\n        else:\\n            for i in self.list_clients:\\n                i.disconnect(reason=tr.key("disconnect.server.closed"))\\n        self.getConsole().log("Closing socket...", 0)\\n        self.socket.close()\\n        self.getConsole().log("Stopping all tasks...", 0)\\n        for t in lthr:\\n            t: thread.Thread\\n            try:\\n                t.running = False  # stop console\\n            except AttributeError:\\n                pass\\n            t.join(timeout=1) if t is not thread.current_thread() else None\\n            lthr.remove(t)\\n        ...\\n        # Stop plugins\\n        ...\\n\\n        # Save and clear sensitive cryptographic data\\n        self.crypto_sys.stop()\\n        if not (critical_stop):\\n            self.getConsole().log(f"Server closed with {critical} criticals, {errors} errors, {warnings} warnings, {info} infos and {unknow} unknown logs : {reason}", 0)\\n            self.getConsole().log("[Press enter to exit]")\\n            self.getConsole().running = False\\n            exit()\\n        else:\\n            self.getConsole().log(f"Server closed with {critical} criticals, {errors} errors, {warnings} warnings, {info} infos and {unknow} unknown logs : {reason}", 100)\\n            self.crash(reason, e)\\n            self.getConsole().log("[Press enter to exit]")\\n            self.getConsole().running = False\\n            exit(-1)\\n\\n    def crash(self, reason, e: Exception = None):\\n        """Generate a crash report\\n        Arg:\\n        - reason: str --> The crash message"""\\n        if e == None:\\n            try:\\n                raise Exception(reason)\\n            except Exception as e:\\n                pass\\n        crash_gen.gen_crash_report(CLIENT_VERSION, SERVER_VERSION, e)\\n        \\n        return\\n        raise DeprecationWarning("This code should be unreachable, please report us this.")\\n        c = 0\\n        try:\\n            import datetime\\n            t = traceback.format_exc()\\n        except Exception:\\n            t = None\\n        while os.path.exists("crash_reports/crash{0}".format(c)):\\n            c += 1\\n        with open("crash_reports/crash{0}".format(c), "w") as crashfile:\\n            crashfile.write(f"""{datetime.datetime.now()}\\\\nBeaconMC {SERVER_VERSION}\\\\nFor Minecraft {CLIENT_VERSION}\\\\n________________________________________________________________________________________________________________\\\\nCritical error, the server had to stop. This crash report contain informations about the crash.\\\\n________________________________________________________________________________________________________________\\\\nCause of the crash : {reason}\\\\n{traceback.format_exc(e)}\\\\nDebug mode : {DEBUG}\\\\n________________________________________________________________________________________________________________\\\\n{t}""")\\n\\n    def add_client_thread(self):\\n        """Thread for add clients."""\\n        global state\\n        self.client_id_count = 0\\n        while state == "ON":\\n            try:\\n                client_connection, client_info = self.socket.accept()\\n            except OSError:\\n                tm.sleep(0.1)\\n                continue\\n            cl = Client(client_connection, client_info, self)\\n            # self.list_clients.append(cl)\\n            thr = thread.Thread(target=cl.client_thread, args=[self.client_id_count])\\n            thr.start()\\n            lthr.append(thr)\\n            self.client_id_count += 1\\n            tm.sleep(0.1)\\n\\n    def is_premium(self, username: str):\\n        """Check if the user is a premium user. Return a boolean"""\\n        import libs.mojangapi as mojangapi\\n\\n        accchecker = mojangapi.Accounts()\\n        return accchecker.check(self.username)\\n\\n    def setblock(self, base_request: bytes):\\n        """Analyse the setblock request and modify a block"""\\n        id = base_request[0]\\n        x = base_request[1:2]\\n        y = base_request[3:4]\\n        z = base_request[5:6]\\n        mode = base_request[7]\\n        block = base_request[8]\\n        # check the request\\n        if id != "\\\\x05":\\n            self.getConsole().log("A non-setblock request was sent to the bad method. Something went wrong. Please leave an issue on GitHub or on Discord !", 100)\\n            self.stop(critical=True, reason="A non-setblock request was sent to the bad method. Something went wrong. Please leave an issue on GitHub or on Discord !")\\n            raise RequestAnalyseException("Exception on analysing a request : bad method used (setblock andnot unknow).")\\n        # TODO: Modify the block in the world\\n        ...\\n        # TODO: send to every clients the modification\\n        ...\\n\\n    def post_to_chat(self, message: str, author: str = ""):\\n        """Post a message in all player\\\'s chat\\n        Args:\\n        - message: str --> the message to send\\n        - author: str --> the author of the message: by default ""."""\\n        if author == "":\\n            msg = message\\n        else:\\n            msg = f"<{author}>: {message}"\\n        for p in self.list_clients:\\n            p: Client\\n            p.send_msg_to_chat(msg)\\n        self.getConsole().log(msg, 4)\\n\\n    def mp(self, message: str, addressee: str, author: str):\\n        """Send a mp to 1 player\\n        Args:\\n        - message:str --> the message to send in mp\\n        - addressee:str --> player that will receive msg\\n        - author:str --> the author of the msg: by default ""."""\\n\\n        pl = self.find_player_by_username(addressee)\\n        msg = f"{author} --> you: {message}"\\n        pl.send_msg_to_chat(msg)\\n        self.getConsole().log(f"{author} --> {pl}: {message}", 4)\\n        for pl in self.PLUGIN_LIST:\\n            pl.on_mp(message=message, source=author, addressee=addressee)\\n\\n    def find_player_by_username(self, username:str):\\n        """Find the player socket with the username.\\n        Arg:\\n        - username:str --> the username of the player.\\n        - Returns player socket\\n        - return None if no player found\\n        - Raise error if more than 1 player is found"""\\n        lst = []\\n        for p in self.list_clients:\\n            if p.username == username:\\n                lst.append(p)\\n        if len(lst) == 0:\\n            return None\\n        elif len(lst) == 1:\\n            return lst[0]\\n        else:\\n            raise TwoPlayerWithSameUsernameException(f"2 players with the same username {username} were found.")\\n\\n\\nclass PacketException(Exception):\\n    pass\\n\\nclass PrefixedArray(object):\\n    def __init__(self, array:tuple|list):\\n        self.data = []\\n        for i in array:\\n            self.data.append(i)\\n        self.lenth = len(self.data)\\n        \\n    def happend(self, data):\\n        self.data.happend(data)\\n        \\n    def encode(self):\\n        self.lenth = len(self.data)\\n        elenth = Packet(None, None).pack_varint(self.lenth)\\n        prefixlenth = Packet(None, None).pack_varint(len(elenth))\\n        end = prefixlenth + elenth\\n        for i in self.data:\\n            end += Packet(None, None).pack(i)\\n        return end\\n\\nclass Packet(object):\\n    # DANGER | DO NOT TOUCH\\n    SEGMENT_BITS = 0x7F\\n    CONTINUE_BIT = 0x80\\n\\n    def __init__(self, socket: skt.socket, \\n    direction: Literal["-OUTGOING", "-INCOMING"], typep: hex = None, \\n    packet: bytes = None, args: tuple = None):\\n\\n        self.type = typep\\n        self.socket = socket\\n        self.direction = direction\\n        self.packet = packet\\n        self.args = args\\n\\n        # if packet == None or b"" and typep == None:\\n        #    raise PacketException(f"No information provided in the Packet instance {self}")\\n        if direction == "-INCOMING":\\n            self.incoming_packet()\\n        elif direction == "-OUTGOING":\\n            self.outgoing_packet()\\n\\n    def incoming_packet(self):\\n        self.unpack()\\n\\n    def unpack_uuid(self, uuid):\\n        if len(uuid) != 16:\\n            raise ValueError(f"invalid lenth {len(uuid)} for binary uuid")\\n\\n        hex_uuid = uuid.hex()\\n        uuid_format = f"{hex_uuid[:8]}-{hex_uuid[8:12]}-{hex_uuid[12:16]}-{hex_uuid[16:20]}-{hex_uuid[20:]}"\\n\\n        return uuid_format\\n\\n    def wait_for_packet(self):\\n        if self.type == "-INCOMING":\\n            self.lenth = self.unpack_varint(self.socket.recv(1))\\n            tc = self.lenth\\n            if self.lenth <= 0:\\n                raise PacketException("NullPacket")\\n            self.id = self.unpack_varint(self.socket.recv(1))\\n            tc -= 1\\n            if self.id == 0:\\n                # 2 more possibles cases\\n                ...\\n        else:\\n            raise PacketException("Wating to receive packet in -OUTGOING mode")\\n\\n    def unpack(self):\\n        lenth = self.packet[0]\\n        id = self.packet[1]\\n        other = self.packet[2:]\\n        self.type = id\\n        self.args = other\\n        return lenth\\n\\n    def outgoing_packet(self):\\n        ...\\n\\n    def pack_varint(self, d: int):\\n        o = b""\\n        # if d >= 255:\\n        #    o = d.to_bytes(2, byteorder="little")\\n        # else:\\n\\n        # test\\n        if True:\\n            while True:\\n                b = d & 0x7F\\n                d >>= 7\\n                o += struct.pack("B", b | (0x80 if d > 0 else 0))\\n                if d == 0:\\n                    break\\n        return o\\n\\n    def unpack_varint(self, data, debug=False):\\n        if debug:\\n            srv.getConsole().log(f"Data : {data}", 3)\\n        d = 0\\n        for i in range(5):\\n            b = data[i]\\n            d |= (b & 0x7F) << (7 * i)\\n            if not b & 0x80:\\n                break\\n        return d\\n\\n    def pack_data(self, d):\\n        h = self.pack_varint(len(d))\\n        if isinstance(d, str):\\n            d = bytes(d, "utf-8")\\n        return h + d\\n\\n    def send(self):\\n        if self.direction == "-OUTGOING":\\n            self.socket.send(self.__repr__())\\n        else:\\n            raise PacketException("Incoming packet tryied to be sended")\\n        \\n    def pack(self, i) -> bytes:\\n        if isinstance(i, int):\\n            return self.pack_varint(i)\\n        elif isinstance(i, PrefixedArray):\\n            return i.encode()\\n        elif isinstance(i, UUID):\\n            return self.pack_uuid(i.uuid)\\n        elif isinstance(i, bool):\\n            if i:\\n                return b"\\\\x01"\\n            else:\\n                return b"\\\\x00"\\n        elif isinstance(i, tuple) or isinstance(i, list):\\n            x = b""\\n            for j in i:\\n                x += self.pack(j)\\n            return self.pack(len(i)) + x\\n        elif isinstance(i, bytes):\\n             return self.pack_varint(len(i)) + i\\n        elif isinstance(i, bytearray):\\n            return self.pack_varint(len(bytes(i))) + bytes(i)\\n        elif isinstance(i, str):\\n            return self.pack_data(i)\\n        else:\\n            return self.pack_data(i)\\n\\n    def __repr__(self) -> bytes:\\n        out = self.pack_varint(self.type)   # pack the type\\n        for i in self.args:\\n            out += self.pack(i)\\n        out = self.pack_varint(len(out)) + out\\n        return out\\n\\n    def pack_uuid(self, uuid_to_pack):\\n        return uuid.UUID(uuid_to_pack).bytes\\n\\n    def __str__(self):\\n        return self.__repr__().decode()\\n\\n########################################################################################################################################################################################################################\\n########################################################################################################################################################################################################################\\n########################################################################################################################################################################################################################\\n\\n\\nclass UUID(object):\\n    def __init__(self, uuid):\\n        self.uuid = uuid\\n\\n\\nclass Client(object):\\n    def __init__(self, connexion: skt.socket, info, server: MCServer):\\n        self.connexion = connexion\\n        self.info = info\\n        self.server = server\\n        self.is_op = False\\n        self.op_level = None\\n        self.x = None\\n        self.y = None\\n        self.z = None\\n        self.connected = True\\n        self.protocol_state = "Handshaking"\\n        self.encrypted = False\\n        self.authenticated = False\\n        self.configured = False\\n        self.gamemode = default_gamemode\\n\\n    def on_heartbeat(self):\\n        """Id of the packet: 0x00"""\\n        client_protocol_version = self.request[1:]\\n        ...\\n\\n    def on_login_start(self):\\n        """Starting the login in (rq C --> S)"""\\n        self.request\\n        ...\\n\\n    def sha1_hash_digest(self, hash):\\n        number_representation = self._number_from_bytes(hash.digest(), signed=True)\\n        return format(number_representation, \\\'x\\\')\\n    \\n    def _number_from_bytes(self, b, signed=False):\\n        try:\\n            return int.from_bytes(b, byteorder=\\\'big\\\', signed=signed)\\n        except AttributeError: \\n            if len(b) == 0:\\n                b = b\\\'\\\\x00\\\'\\n            num = int(str(b).encode(\\\'hex\\\'), 16)\\n            if signed and (ord(b[0]) & 0x80):\\n                num -= 2 ** (len(b) * 8)\\n            return num\\n            \\n    def _check_state(self, target:str):\\n        """Raises a ProtocolError if the Client protocol state is not what expected"""\\n        if self.protocol_state != target:\\n            raise ProtocolError(f"Attemping to send a packet while in an incorrect protocol state (\\\'{self.protocol_state}\\\' instead of \\\'{target}\\\').")\\n            \\n    def _send_bundle_delimiter(self):\\n        self._check_state("Play")\\n        pckt = Packet(self.connexion, typep=0, direction="-OUTGOING", args=())\\n        pckt.send()\\n            \\n    def _send_game_event_packet(self, event:int, value:float):\\n        """Args:\\n        event:\\n          - 0: no respawn block\\n          - 1: rain starts\\n          - 2: rain ends\\n          - 3: change gamemode\\n          - 4: win game (end exit portal)\\n          - 5: demo\\n          - 6: arrow hit\\n          - 7: rain level change\\n          - ..."""\\n        \\n        self._check_state("Play")\\n        \\n        resp = Packet(self.connexion, typep=22, direction="-OUTGOING", args=(event, value))\\n        resp.send()\\n        \\n    def _animate_entity(self, entity_id:int, animation:int):\\n        self._check_state("Play")\\n        pckt = Packet(self.connexion, direction="-OUTGOING", typep=2, args=(entity_id, animation))\\n        pckt.send()\\n        \\n    def _spawn_entity(self, entity_type:str, id:int, uuid:str, location, data, velocity, is_npc=False):\\n         self._check_state("Play")\\n         ...\\n\\n    def load_properties(self):\\n        if ONLINE_MODE:\\n            if PREVENT_PROXY_CONNEXION:\\n                ip_field = self.info\\n            else:\\n                ip_field = ""\\n            try:\\n                response = requests.get(url="https://sessionserver.mojang.com/session/minecraft/hasJoined", params={"username": self.username, "serverId": SERVER_ID, "ip": ip_field})\\n            except TimeoutError:\\n                self.server.getConsole().log("Authentification servers didn\\\'t responded on time !", 1)\\n                self.disconnect("Time out with mojang auth servers. Are they online ?")\\n                return\\n            except requests.HTTPError as e:\\n                self.server.getConsole().log("An unexcepted exception occured with authentification servers !", 2)\\n                self.server.getConsole().log(traceback.format_exc(e), 2)\\n                self.disconnect("HTTP Exception with auth servers, are they online ?")\\n                return\\n            except ConnectionError:\\n                self.server.getConsole().log("Exception while connecting to auth servers.", 2)\\n                self.disconnect("Exception while connecting to the mojang auth servers.")\\n                return\\n            except Exception as e:\\n                self.server.getConsole().log("Unknow exception while contacting auth servers.", 2)\\n                self.server.getConsole().log(traceback.format_exc(e), 2)\\n                self.disconnect("Failed to login with auth servers (internal exception).")\\n            assert isinstance(response, requests.Response)\\n            if response.status_code == 204:\\n                self.server.getConsole().log("Mojang authentification server responded by 204 http status !", 1)\\n                self.disconnect("Invalid response from authentifications servers.")\\n                return\\n            api_response = json.loads(response.content)\\n            if response.status_code != 200:\\n                if response.status_code == 403:\\n                    self.disconnect(f"Failed to login: {api_response[\\\'error\\\']}.")\\n                else:\\n                    self.disconnect("Failed to login.")\\n                return\\n\\n            self.properties = api_response["properties"]\\n            \\n            list_prop = []\\n            for p in self.properties:\\n                list_prop.append("name")\\n                list_prop.append(p["name"])\\n                list_prop.append("value")\\n                list_prop.append(p["value"])\\n                try:\\n                    sig = p["signature"] # potential kry error\\n                    list_prop.append("signature") \\n                    list_prop.append(sig)\\n                except KeyError:\\n                    pass\\n            array = PrefixedArray(list_prop)\\n            parg = [UUID(self.uuid), self.username, array]\\n            \\n        else:\\n            parg = [UUID(self.uuid), self.username, PrefixedArray(["name", "textures", "value", "eyJ0aW1lc3RhbXAiOjE1OTAwMDAwMDAsInByb2ZpbGVJZCI6IjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAiLCJwcm9wZXJ0aWVzIjpbeyJrZXkiOiJUZXh0dXJlcyIsInZhbHVlIjoieyJTS0lOIjp7InVybCI6Imh0dHBzOi8vc2Vzc2lvbnMubWluZWNyYWZ0Lm5ldC90ZXh0dXJlLzE2YTQ4Njc0YzMwMmRjM2VhNzZjZmZhZjMyMmQ5MmJmZjBjMDI5ZTZhOGY4MTk4ZDczZjMzYjRhZDdkMzY2ZjAifX19"])]\\n        \\n        response = Packet(self.connexion, "-OUTGOING", 2, args=parg)\\n        self.server.getConsole().log(response.__repr__(), 3)\\n        response.send()\\n        self.server.list_clients.append(self)\\n\\n    def client_thread(self, id):\\n        """Per client thread"""\\n        self.id = id\\n        try:\\n            self.server.getConsole().log(f"New client from {self.info}", 3)\\n            self.server.getConsole().log("Starting listening loop in Handshaking state", 3)\\n\\n            # Ping / Auth loop (to developp)\\n            d_reason = "None"\\n            misc_d = True\\n            while self.connected and state == "ON":\\n                # Auth loop\\n                try:\\n                    num_read = 0\\n                    lenth = 0\\n                    while True:\\n                        byte = self.connexion.recv(1)\\n                        if not byte:\\n                            return None\\n                        byte = byte[0]\\n                        lenth |= (byte & 0x7F) << (7 * num_read)\\n                        num_read += 1\\n                        if not (byte & 0x80):\\n                            break\\n                        if num_read > 5:\\n                            raise ValueError("Varint too big")\\n                    if lenth == b"":\\n                        continue\\n                    if self.encrypted:\\n                        self.request = self.server.crypto_sys.decode(self.connexion.recv(lenth), self.shared_secret)\\n                    else:\\n                        self.request = Packet.pack_varint(None, lenth)  + self.connexion.recv(lenth)\\n                except ConnectionResetError:\\n                    self.server.getConsole().log(f"Client {self.info} disconnected : Connexion reset.")\\n                if self.request == "":\\n                    continue\\n                self.server.getConsole().log(f"Receiving serverbound packet : {self.request}", 3)\\n\\n                self.packet = Packet(self.connexion, "-INCOMING", packet=self.request)\\n\\n                self.server.getConsole().log(f"Packet ID : {self.packet.type}", 3)\\n                self.server.getConsole().log(f"Protocol state : {self.protocol_state}", 3)\\n\\n                if self.protocol_state == "Handshaking":\\n\\n                    if self.packet.type == 0:\\n                        if self.packet.args[-1] == 1:\\n                            # Switch protocol state to status\\n                            self.protocol_state = "Status"\\n                            self.server.getConsole().log(f"Switching to Status state for {self.info}", 3)\\n                            continue\\n\\n                        elif self.packet.args[-1] == 2:\\n                            # Switch protocol state to login\\n                            self.protocol_state = "Login"\\n                            self.protocol_version = Packet.unpack_varint(None, self.packet.args[0:2])\\n                            self.server.getConsole().log(f"Switching to login state for {self.info}", 3)\\n                            continue\\n\\n                        elif self.packet.args[-1] == 3:\\n                            # Switch protocol state to transfer\\n                            if PREVENT_PROXY_CONNEXION:\\n                                self.connected = False\\n                                self.server.getConsole().log(f"Disconnecting {self.info} : Unauthorised proxy connexion.", 3)\\n                                break\\n                            self.protocol_state = "Transfer"\\n                            self.server.getConsole().log(f"Switching to transfer state for {self.info}", 3)\\n                            continue\\n                        else:\\n                            self.connected = False\\n                            self.server.getConsole().log(f"Disconnecting {self.info} : protocol error (unknow next state {self.packet.args[-1]} in handshake)", 3)\\n                            break\\n\\n                elif self.protocol_state == "Status":\\n                    if self.packet.type == 0:\\n                        # Status request -> Status response (SLP)\\n                        self.SLP()\\n                        continue\\n                    elif self.packet.type == 1:\\n                        pong_packet = self.packet\\n                        pong_packet.direction = "-OUTGOING"\\n                        pong_packet.send()\\n                        # payload = self.packet.args[0]\\n                        # self.ping_response(payload)\\n                        self.connected = False\\n                        break\\n\\n                elif self.protocol_state == "Login":\\n                    if self.packet.type == 0:\\n                        if self.protocol_version != PROTOCOL_VERSION:\\n                            self.disconnect(f"Please try to connect using Minecraft {CLIENT_VERSION}")\\n                            return\\n                        unamelenth = self.packet.args[0]\\n                        i = 1\\n                        self.username = ""\\n                        while i <= unamelenth:\\n                            sb = self.packet.args[i:i+1]\\n                            self.username += sb.decode("utf-8")\\n                            i += 1\\n\\n                        #i = 0\\n                        self.uuid = self.packet.unpack_uuid(uuid=self.packet.args[i:])\\n\\n\\n                        self.server.getConsole().log(f"UUID of {self.username} is {self.uuid}.", 0)\\n                        self.server.getConsole().log(f"{self.username} is logging in from {self.info}.", 0)\\n                        \\n                        op = self.server.is_op(self.uuid, self.username)\\n                        \\n                        self.is_op = True if op != -1 else False\\n                        self.op_level = op if self.is_op else None\\n\\n                        for player in self.server.list_clients:\\n                            if self.username == player.username or self.uuid == player.uuid:\\n                                if i == 1:\\n                                    self.server.getConsole().log(f"{self.username} is already connected !", 1)\\n                                    if not(ONLINE_MODE) and ENFORCE_OFFLINE_PROFILES:\\n                                        if self.info == player.info:\\n                                            self.connected = False\\n                                            misc_d = False\\n                                            d_reason = tr.key("disconnect.username.conflict.offline.sameip")\\n                                        else:\\n                                            self.server.getConsole().log("Banning the player for security reason: the server is running offline mode.", 1)\\n                                            self.server.banip(ip=self.info, reason=tr.key("disconnect.username.conflict.offline.dif_ip"))\\n                                            self.server.banip(ip=player.info, reason=tr.key("disconnect.username.conflict.offline.dif_ip"))\\n                                            self.server.kick(player, tr.key("disconnect.username.conflict.offline.dif_ip"))\\n                                    else:\\n                                        self.connected = False\\n                                        misc_d = False\\n                                        d_reason = tr.key("disconnect.username.conflict.online")\\n                                    break\\n                                else:\\n                                    i += 1\\n\\n                        with open("banned-ips.json", "r") as f:\\n                            banedips = json.loads(f.read())\\n                            for bip in banedips:\\n                                if bip["ip"] == self.info:\\n                                    self.connected = False\\n                                    misc_d = False\\n                                    reason = {bip[\\\'reason\\\']}\\n                                    d_reason = tr.key("disconnect.ban.ip")\\n                                    self.server.getConsole().log(f"{self.username}\\\'s IP is banned. Disconnecting...", 0)\\n                                    break\\n                        with open("banned-players.json", "r") as f:\\n                            banedacc = json.loads(f.read())\\n                            for bacc in banedacc:\\n                                if bacc["username"] == self.info:\\n                                    self.connected = False\\n                                    misc_d = False\\n                                    reason = {bacc[\\\'reason\\\']}\\n                                    d_reason = tr.key("disconnect.ban.account")\\n                                    self.server.getConsole().log(f"{self.username} is banned. Disconnecting...", 0)\\n                                    break\\n                        \\n\\n                        if len(self.server.list_clients) >= MAX_PLAYERS:\\n\\n                            self.connected = False\\n                            misc_d = False\\n                            d_reason = tr.key("disconnect.full")\\n                            continue\\n                        if whitelist:\\n                            with open ("whitelist.json", "r") as wf:\\n                                data = json.loads(wf.read())\\n                                o = 0\\n                                for d in data:\\n                                    if d["uuid"] == self.uuid:\\n                                        o += 1\\n                                if o != 1:\\n                                    self.connected = False\\n\\n                                    d_reason = tr.key("disconnect.whitelist")\\n                                    misc_d = False\\n\\n                                    if o > 1:\\n                                        self.server.getConsole().log("User is whitelisted more than 1 time !", 1)\\n                                    continue\\n                        if ONLINE_MODE:\\n                            api_system = m_api.Accounts()\\n                            check_result = api_system.authenticate(self.username, self.uuid)\\n                            if check_result[0]:\\n                                self.server.getConsole().log(f"successfully authenticated {self.username}.", 3)\\n                                self.authenticated = True\\n                                pass\\n                            else:\\n                                self.server.getConsole().log(f"Failed to authenticate {self.info} using uuid {self.uuid} and username {self.username}.", 1)\\n                                self.connected = False\\n                                d_reason = tr.key("disconnect.login.failed")\\n                                misc_d = False\\n                                break\\n                            \\n                            # temp\\n                            # self.load_properties()\\n                            # continue\\n\\n                            # Encryption request\\n                            verify_token = bytearray()\\n                            for i in range(4):\\n                                verify_token.append(rdm.randint(0, 255))\\n                            resp_pack = Packet(self.connexion, "-OUTGOING", typep=1, args=(SERVER_ID, \\n                                bytearray(self.server.crypto_sys.__public_key__.public_bytes(encoding=serialization.Encoding.DER, format=serialization.PublicFormat.SubjectPublicKeyInfo)), \\n                                verify_token))\\n                            resp_pack.send()\\n                            continue\\n                            \\n\\n                            # TODO Enable compression (would be optional) (in other "if" fork)\\n                            ...\\n                        else:\\n                            self.server.getConsole().log("WARNING! YOUR SERVER IS RUNNING OFFLINE MODE, SO CRACKED AND UNVERIFIED USERS CAN CONNECT. MOREOVER, IDENTITY THEFT IS POSSIBLE AND NOT DETECTABLE.", 1)\\n                            # load player properties\\n                            self.load_properties()\\n                            continue\\n\\n                    elif self.packet.type == 2:\\n                        self.shared_secret = b""\\n                        for i in range(self.packet.args[0] + 1):\\n                            if i == 0:\\n                                continue\\n                            self.shared_secret += bytes(self.packet.args[i])\\n                            j = i\\n                        verify_token2_lenth = self.packet.args[j+1]\\n                        verify_token2 = b""\\n\\n                        for i in range(verify_token2_lenth):\\n                            verify_token2 += bytes(self.packet.args[j + i + 1])\\n\\n                        try:\\n                            self.shared_secret = self.server.crypto_sys.decode(self.shared_secret)\\n                        except Exception as e:\\n                            self.server.getConsole().log(f"Exception during encryption for {self.username} ({self.uuid}) !", 2)\\n                            self.server.getConsole().log(traceback.format_exc(e), 2)\\n                            self.disconnect("Encryption error. If the error is persistent, please report the bug to BeaconMC issue tracker.")\\n\\n                        # decrypt token\\n                        if verify_token == self.server.crypto_sys.decode(verify_token2, self.shared_secret):\\n                            self.server.getConsole().log(f"Encryption check done successfully for {self.info}", 3)\\n                        else:\\n                             self.server.getConsole().log("An exception occured with encryption, disconnecting...", 2)\\n                             self.disconnect("Encryption error, try to restart your game !")\\n                             return\\n                        self.encrypted = True\\n                        self.server.getConsole().log("Connexion encrypted successfully.", 3)\\n\\n                        self.load_properties()\\n                        continue\\n\\n                    elif self.packet.type == 3 and (self.authenticated or not(ONLINE_MODE)):\\n                        self.server.getConsole().log("switching protocol state to Configuration.", 3)\\n                        self.protocol_state = "Configuration"\\n                    \\n                    elif self.packet.type == 4 and self.encrypted and self.authenticated:\\n                        ...\\n                \\n                elif self.protocol_state == "Configuration" and self.configured:\\n                    if self.packet.type == 3:\\n                        self.protocol_state = "Play"\\n                        self.server.getConsole().log("Switching protocol state to play", 3)\\n                        break\\n                    elif self.packet.type == 4:\\n                        ...\\n\\n            ###############################################################################\\n\\n\\n            if not(self.connected and state == "ON"):\\n                # If server is stopping or the client is disconnecting (usefull ?)\\n                if misc_d:\\n                    self.server.getConsole().log(f"Disconnecting {self.info} for some misc reasons.", 3)\\n                else:\\n                    message = "{\\\'text\\\': \\\'" + d_reason + "\\\'}"\\n                    if self.protocol_state == "Login":\\n                        dp = Packet(self.connexion, "-OUTGOING", typep=0, args=(message, ))\\n                    elif self.protocol_state == "Configuration":\\n                        dp = Packet(self.connexion, "-OUTGOING", typep=2, args=(message, ))\\n                    dp.send()\\n                    self.server.getConsole().log(f"{self.username} lost connexion: {d_reason}.", 0)\\n                self.connexion.close()\\n                return\\n\\n            ###############################################################################\\n\\n            \\n            while self.connected and state == "ON" and self.protocol_state == "Play":\\n                self.server.getConsole().log(f"{self.username} joined the game.", 0)\\n                self.server.post_to_chat(f"{self.username} joined the game")\\n                # to clean\\n\\n                l = self.connexion.recv(1)\\n                self.packet = Packet(self.connexion, "-INCOMING", packet=self.request)\\n                \\n                ...\\n                if self.packet.type == 1:\\n                  # query block debug info\\n                  if not(self.is_op):\\n                    # deny\\n                    ...\\n                    continue\\n                  ...\\n                  \\n                elif self.packet.type == 4:\\n                    if self.is_op and self.op_level >= 2:\\n                        self._send_game_event_packet(3, self.packet.args[0])\\n                        self.server.getConsole().info(f"Changing gamemode to {self.packet.args[0]} for {self.username}.", 3)\\n                    else:\\n                        ... # deny\\n                    continue\\n\\n                # if self.request[0] == "\\\\x05":\\n                #    #setblock message\\n                #    self.server.setblock(self.request)\\n                # elif self.request[0] == "\\\\x08":\\n                #    #pos message\\n                #    self.update_pos()\\n                # elif self.request[0] == "\\\\x0d":\\n                #    #chat message\\n                #    if self.request[2] == "/":#surely not that\\n                #        ... #cmd\\n                #    self.server.post_to_chat(author=self.username, message=self.request[1:])\\n                # elif self.request[:4] == "\\\\x13\\\\x00\\\\xf2\\\\x05\\\\x0c":\\n                #    if self.request[-5:] == "\\\\xd5\\\\x11\\\\x01\\\\x01\\\\x00":\\n                #        #server list request\\n                #        self.connexion.send(bytes(\\\'\\\\xca\\\\x01\\\\x00\\\\xc7\\\\x01{"previewsChat":false,"description":{"text":"{0}"},"players":{"max":{1},"online":{2}},"version":{"name":"{3}","protocol":{4}}}\\\'.format(self.treat(MOTD), MAX_PLAYERS, connected_players, CLIENT_VERSION, PROTOCOL_VERSION)))\\n                #    else:\\n                #        c = -1\\n                #        u = ""\\n                #        while self.request[c] != "\\\\x0f":\\n                #            u = self.request[c] + u\\n                #            c -= 1\\n                #        self.username = u\\n                #        self.joining()\\n            self.server.list_clients.remove(self)\\n        except ConnectionAbortedError:\\n            self.server.getConsole().log(f"Connexion aborted by client {self.info} ({self.username})", 0)\\n            self.connexion.close()\\n            self.connected = False\\n        except Exception as e:\\n            import traceback\\n            self.server.getConsole().log(f"{traceback.format_exc()}", 2)\\n            self.disconnect(f"Server internal Exception : {e}.")\\n\\n    def ping_response(self, payload):\\n        """Send a response to a ping to make the client get the ping in ms of the server."""\\n\\n        response = Packet(self.connexion, "-OUTGOING", typep=1, args=(payload,))\\n        response.send()\\n\\n    def status_request(self):\\n        ...\\n\\n    def bad_version(self):\\n        """Called to disconnect the connecting client that has a bad protocol version"""\\n        self.server.getConsole().log("A client used a bad version. Disconnecting this client...", 0)\\n        self.connexion.send(encode(f\\\'E\\\\x00C{"translate":"multiplayer.disconnect.incompatible","with":["{CLIENT_VERSION}"]}\\\'))\\n        self.connected = False\\n        self.connexion.close()\\n        self.server.list_client.remove(self)\\n        self.server.getConsole().log("Client disconnected: bad Minecraft version", 0)\\n        del(self)\\n\\n    def treat(self, msg):\\n        """Check and modify the message gived in argument in the goal of be readable by the client."""\\n        final = ""\\n        for char in msg:\\n            try:\\n                final += CONFIG_TO_REQUEST[char]\\n            except IndexError:\\n                final += char\\n        return final\\n\\n    def update_pos(self):\\n        """update the client pos with the request"""\\n        ...\\n\\n    def unpack_uuid(self, d:bytes):\\n        msb = struct.unpack(\\\'>Q\\\', d[:8])[0]\\n        lsb = struct.unpack(\\\'>Q\\\', d[8:])[0]\\n        return uuid.UUID(int=(msb << 64) | lsb)\\n\\n    def joining(self):\\n        """When the request is a joining request"""\\n        self.username = self.packet.args[0]\\n        self.uuid = self.packet.args[1]\\n        self.server.getConsole().log(f"Player {self.username} with uuid {self.uuid} is loging in !")\\n\\n        if connected_players >= MAX_PLAYERS:\\n            r = tr.key("disconnect.server_full")\\n            self.server.getConsole().log(f"Disconnecting {self.username}: {r}", 0)\\n            self.disconnect(tr.key("disconnect.server_full"))\\n            return\\n        # HOW TO GET THE PROTOCOL VERSION ?\\n        if not(PROTOCOL_VERSION == PROTOCOL_VERSION):\\n            r = tr.key("disconnect.bad_protocol")\\n            self.server.getConsole().log(f"Disconnecting {self.username} : {r}.", 0)\\n            self.bad_version()\\n            return\\n        if not(self.server.is_premium(self.username)):\\n            r = tr.key("disconnect.not_premium")\\n            self.server.getConsole().log(f"Disconnecting {self.username} : {r}.", 0)\\n            self.disconnect(tr.key("disconnect.not_premium"))\\n            return\\n\\n        if ONLINE_MODE:\\n            p_response = Packet(self.connexion, direction="-OUTGOING", typep=1, args=("serverid", b"publick key", "verify token", ONLINE_MODE))\\n            self.server.getConsole().log(p_response, 3)\\n            p_response.send()\\n\\n        packet_r = Packet(self.connexion, "-OUTGOING", typep=2, args=(self.uuid, self.username, 0, False))\\n        self.server.getConsole().log(packet_r, 0)\\n        packet_r.send()\\n\\n\\n        """\\n        self.p_version = self.request[1]\\n        self.username = self.request[1:64]\\n        self.key = self.request[65:129]\\n        log(f"Joining request from  {self.username} !", 0)\\n        if self.server.ispremium(self.username, self.key):\\n            log(f"{self.username} is premium.", 0)\\n            if connected_players < MAX_PLAYERS:\\n                if self.p_version == PROTOCOL_VERSION:\\n                    log(f"Connexion accepted for {self.username}")\\n                    #co ok !\\n                    ...\\n                else:\\n                    log(f"Failed to connect {self.username} : bad version.", 0)\\n                    #self.disconnect(tr.key("disconnect.bad_protocol"))   :-(\\n                    self.bad_version()\\n            else:\\n                log(f"Failed to connect {self.username} : server full.", 1)\\n                self.disconnect(tr.key("disconnect.server_full"))\\n        else:\\n            log(f"User {self.username} is not premium ! Access couldn\\\'t be gived.", 1)\\n            self.disconnect(tr.key("disconnect.not_premium"))"""\\n\\n    def disconnect(self, reason=""):\\n        """Disconnect the player\\n        !!! not disconnectED !!!"""\\n        if reason == "":\\n            reason = tr.key("disconnect.default")\\n        reason = \\\'{"text":"\\\' + reason + \\\'"}\\\'\\n        if self.protocol_state == "Login":\\n            dp = Packet(self.connexion, "-OUTGOING", typep=0, args=(reason, ))\\n            print(dp.__repr__())\\n        elif self.protocol_state == "Configuration":\\n            dp = Packet(self.connexion, "-OUTGOING", typep=2, args=(reason, ))\\n        elif self.protocol_state == "Play":\\n            dp = Packet(self.connexion, "-OUTGOING", typep=27, args=(reason, ))\\n        dp.send()\\n        self.connected = False\\n        tm.sleep(1)\\n        self.connexion.close()\\n        if self in self.server.list_clients:\\n            self.server.list_clients.remove(self)\\n        del(self)\\n        \\n    def send_links(self):\\n        # Send server links\\n        assert self.protocol_state == "Configuration"\\n        sl = []\\n        type_dict = {\\n            "bug_report": 0, \\n            "community_guideline": 1, \\n            "support": 2,\\n            "status": 3, \\n            "feedback": 4, \\n            "community": 5, \\n            "website": 6, \\n            "forums": 7, \\n            "news": 8, \\n            "announcements": 9\\n        }\\n        assert isinstance(SERVER_LINKS, dict)\\n        links = 0\\n        for link in SERVER_LINKS.items():\\n            try:\\n                if SERVER_LINKS[link[0]] == "":\\n                    continue\\n                else:\\n                    # Protocol misc\\n                    sl.append(True)\\n\\n                    # add the type of the link\\n                    sl.append(type_dict[link[0]])\\n\\n                    # add the content of the link\\n                    sl.append(link[1])\\n\\n                    links += 1\\n            except KeyError as e:\\n                raise ConfigurationError from e\\n        resp = Packet(self.connexion, "-OUTGOING", typep=10, args=(links, sl))\\n        resp.send()\\n\\n    def do_spawn(self):\\n        """Make THIS CLIENT spawn"""\\n        ...\\n        #self.connexion.send()\\n\\n    def identification(self):\\n        """Send id packet to the client"""\\n        opdico = {True:bytes("\\\\x64"), False: bytes("\\\\x00")}\\n        self.connexion.send(f"\\\\x00{bytes(PROTOCOL_VERSION)}{bytes(\\\'Python Server 1.19.4\\\')}{bytes(MOTD)}{opdico[self.is_op]}".encode())\\n\\n    def ping(self):\\n        """Ping sent to clients periodically."""\\n        self.connexion.send("\\\\x01".encode())\\n\\n    def int_to_hex_escape(n):\\n        if n < 0:\\n            raise ValueError("L\\\'entier doit être positif.")\\n\\n        hex_string = n.to_bytes((n.bit_length() + 7) // 8, \\\'big\\\').hex()\\n        escaped_string = \\\'\\\'.join(f\\\'\\\\\\\\x{hex_string[i:i+2]}\\\' for i in range(0, len(hex_string), 2))\\n        return escaped_string\\n\\n    def SLP(self):\\n        try :\\n            with open(\\\'server-icon.png\\\', \\\'rb\\\') as image_file :\\n                favicon = b64encode(image_file.read()).decode(\\\'utf-8\\\')\\n        except FileNotFoundError:\\n            self.server.getConsole().log("Server icon not found, using default BeaconMC icon", 1)\\n            favicon = ""\\n        response = {\\n        "version": {"name": CLIENT_VERSION, "protocol": PROTOCOL_VERSION},\\n        "players": {"max": MAX_PLAYERS, "online": len(self.server.list_clients), "sample": [{"name": "A BeaconMC server", "id": "16dcb929-b271-4db3-9cc6-059a851fcce1"}, {"name": "Join us on GitHub !", "id": "26dcb929-b271-4db3-9cc6-059a851fcce1"}]},\\n        "description": {"text": MOTD},\\n        "favicon": "data:image/png;base64," + favicon,\\n        "modinfo": {"type": "FML", "modlist": []},\\n        "enforcesSecureChat": True,\\n        "previewsChat": True\\n        }\\n\\n        response_str = json.dumps(response)\\n        packet_response = Packet(socket=self.connexion, direction="-OUTGOING", typep=0, args=(response_str, ))\\n        packet_response.send()\\n\\n    def on_SLP(self):\\n        self.server.getConsole().log("Event \\\'on server list ping\\\' triggered !", 3)\\n        request = f\\\'\\\\xca\\\\x01\\\\x00\\\\xc7\\\\x01\\\\u007b"previewsChat":false,"description":\\\\u007b"text":"{MOTD}"\\\\u007d,"players":\\\\u007b"max":{MAX_PLAYERS},"online":{len(self.server.list_clients)}\\\\u007d,"version":\\\\u007b"name":"{CLIENT_VERSION}","protocol":{PROTOCOL_VERSION}\\\\u007d\\\\u007d\\\'        \\n        request = encode(request)\\n        self.connexion.send(request, 1024)\\n\\n        # self.connexion.send(f\\\'0x01{"version":{"name":"1.19.4","protocol":762},"players":{"max":100,"online":5,"sample":[{"name":"thinkofdeath","id":"4566e69f-c907-48ee-8d71-d7ba5aa00d20"}]},"description":{"text":"Hello world"},"favicon":"data:image/png;base64,<data>","enforcesSecureChat":true,"previewsChat":true}\\\')\\n    def send_msg_to_chat(self, msg: str):\\n        """Post a message in the player\\\'s chat.\\n        Argument:\\n        - msg:str --> the message to post on the chat"""\\n        if self.protocol_state != "Play":\\n            return\\n        packet = Packet(self.connexion, "-OUTGOING", 108, args=("{\\\'text\\\': \\\'" + msg + "}", False))\\n        print(packet.__repr__())\\n        packet.send()\\n\\n\\n########################################################################################################################################################################################################################\\n########################################################################################################################################################################################################################\\n########################################################################################################################################################################################################################\\nclass NeoWorld(object):\\n    def __init__(self, name, level=-1):\\n        """Args:\\n        - name: the name of the world (str). Used to load and save worlds.\\n        - level: the type of the world (int). Can be 0 (overworld), 1 (nether) or 2 (end). -1 by default. -1 is for unknow level (when loading for example)"""\\n        self.name = name\\n        if level == -1:\\n            self.level = None\\n        else:\\n            self.level = level\\n        self.loaded = False\\n        self.generated = None\\n        self.BASE = f"{os.getcwd()}{SEP}worlds{SEP}{name}{SEP}"\\n        self.data = None\\n        self.spawn_coord = None\\n\\n    def load(self):\\n        """Load the world"""\\n        # Load world settings\\n        nbt_file = nbtlib.load(self.BASE + "level.dat")\\n        self.difficulty = nbt_file["Data"]["Difficulty"]\\n        self.wonderingtraderspawnchance = nbt_file["Data"]["WanderingTraderSpawnChance"]\\n        ...\\n\\n        self.regions = []\\n\\n\\nclass Region(object):\\n    def __init__(self, x: int, z: int, world_name:str):\\n        self.x = x\\n        self.z = z\\n        self.file = f"worlds{SEP}{world_name}r.{x}.{z}.mca"\\n\\n    def is_chunk_in_region(self, x: int, z: int) -> bool:\\n        region_xz = lambda x,z: (math.floor(x / 32), math.floor(z / 32))\\n        return region_xz(x, z) == (self.x, self.z)\\n\\n\\nclass World(object):\\n    """World class"""\\n    def __init__(self, name, level=-1):\\n        """Args:\\n        - name: the name of the world (str). Used to load and save worlds.\\n        - level: the type of the world (int). Can be 0 (overworld), 1 (nether) or 2 (end). -1 by default. -1 is for unknow level (when loading for example)"""\\n        self.name = name\\n        if level == -1:\\n            self.level = None\\n        self.level = level\\n        self.loaded = False\\n        self.generated = None\\n        self.BASE = "worlds/"\\n        self.data = None\\n        self.spawn_coord = None\\n\\n    def check_generation(self):\\n        """Check if the world was generated.\\n        Return a boolean"""\\n        try:\\n            with open(self.BASE + self.name + ".mcworld", "r") as test:\\n                tst = test.read()\\n                if tst != "":\\n                    return True\\n                else:\\n                    return False\\n        except FileNotFoundError:\\n            return False\\n\\n    def generate(self, level, force=False):\\n        """Generate the world.\\n        Args:\\n        - force: (bool) """\\n        if force:\\n            ok = True\\n        else:\\n            if self.data != None:\\n                ok = False\\n            else:\\n                ok = True\\n        if ok:\\n            self.level = level\\n            c1 = self._new_chunk(0, 0, 0)\\n            c2 = self._new_chunk(1, 0, 0)\\n            c3 = self._new_chunk(0, 0, 1)\\n            c4 = self._new_chunk(1, 0, 1)\\n            self.data.append(c1)\\n            self.data.append(c2)\\n            self.data.append(c3)\\n            self.data.append(c4)\\n            self.spawn_coord = {"x": 8, "y": 8, "y": 8}\\n\\n    def setblock(self, x: int, y: int, z: int, id: int, nbt: str=""):\\n        """Modify a block into the world.\\n        Args:\\n        - x (int): the x coordinate of the block\\n        - y (int): the y coordinate of the block\\n        - z (int): the z coordinate of the block\\n        - id (int): the block type (see world_format.md)\\n        - nbt (str, "" by default): the nbt data of the block."""\\n        block_chunk = self._block_to_chunk_coords(x, y, z)\\n        chunk_index = self.data.find_chunk_index(block_chunk["x"], block_chunk["y"], block_chunk["z"], )\\n        chunk = self.data[chunk_index]\\n\\n        bx = x % 16\\n        by = y % 16\\n        bz = z % 16\\n        \\n        size_x = 16\\n        size_y = 16\\n        size_z = 16\\n        x_coord = bx\\n        y_coord = by\\n        z_coord = bz\\n\\n        for x in range(size_x):\\n            for y in range(size_y):\\n                for z in range(size_z):\\n                    index = x + size_x * (y + size_y * z)\\n\\n                    element = chunk[index]\\n\\n        index_cible = x_coord + size_x * (y_coord + size_y * z_coord)\\n        element_cible = chunk[index_cible]\\n\\n    def find_chunk_index(self, x, y, z):\\n        """Return the chunk Index with the gived coords."""\\n        index = None\\n        for i, j in enumerate(self.data):\\n            if i == 0:\\n                continue\\n            if i[0]["x"] == x and i[0]["y"] == y and i[0]["z"] == z:\\n                index = i\\n                break\\n        return i\\n\\n    def _block_to_chunk_coords(self, x: int, y: int, z: int):\\n        """Convert a block coord to a chunk coord. Args: the coordinates. Return the chunk coords."""\\n        nx = x // 16\\n        ny = y // 16\\n        nz = z // 16\\n\\n        return {"x": nx, "y": ny, "z": nz}\\n\\n    def _new_chunk(self, x: int, y: int, z: int):\\n        """Create a new chunk at the specified CHUNKS COORD !\\n        - Args:\\n            - x (int) the X chunk pos\\n            - y (int) the X chunk pos\\n            - z (int) the X chunk pos\\n        - Return the chunk (lst)"""\\n        c = [{"x":x, "y":y, "z":z}]\\n        count = 0\\n        while count != (16**3):\\n            c.append((0, ""))\\n        return c\\n\\n    def load(self):\\n        """Read a world file and return a World List.\\n        Return data with the correct python server convention."""\\n        if not(self.check_generation):\\n            self.server.getConsole().log("Trying to load an ungenerated world ! Please generate it before loading !Starting generation...", 2)\\n            self.generate()\\n        with open(self.BASE + self.name, "r") as file:\\n            data = file.read()\\n            self.decode(data)\\n            self.data = data\\n            return self.data\\n\\n    def decode(self, data: str):\\n        """Decode some data.\\n        --> Return the world (see world/world_format.md## World format (in running app))"""\\n        infos, world = data.split("=====")\\n        # treat infos\\n        name, level = infos.split("::::")\\n        if name != self.name:\\n            # something went wrong\\n            self.server.getConsole().log("Reading a world name different of the gived name !", 2)\\n            self.name = name\\n            self.server.getConsole().log("Name modified.", 0)\\n        if self.level != level and self.level != None:\\n            # something went wrong\\n            self.server.getConsole().log("Reading a world level different of the gived level !", 2)\\n            self.level = level\\n            self.server.getConsole().log("Level modified.", 0)\\n        if self.level == None:\\n            self.level = level\\n\\n        chunks_list = world.split("<<|<<")\\n        final = []\\n        # treat all chunks\\n        for chunk in chunks_list:\\n            base_chunk_list = []\\n            xyz, blocks_list = chunk.split("|")\\n\\n            # Treat chunk coords\\n            xyz = xyz.split(";")\\n            chunk_coord = {"x": xyz[0], "y": xyz[1], "z": xyz[1]}\\n            base_chunk_list.append(chunk_coord)\\n\\n            # Treat blocks\\n            lst_blocks = blocks_list.split(";")\\n            for block in lst_blocks:\\n                b_type, nbt = block.split(">")\\n                base_chunk_list.append((b_type, nbt))\\n\\n            final.append(base_chunk_list)\\n\\n        return final\\n\\n    def save(self):\\n        """Save the world"""\\n        self.log(f"Saving world {self.name} (level {self.level})...")\\n        dt = self.encode(self.data)\\n        with open(self.BASE + self.name + ".mcworld", "w") as file:\\n            file.write(dt)\\n        self.server.getConsole().log("Saved !")\\n\\n    def encode(self, data: list):\\n        """Encode the world that will be saved.\\n        Arg:\\n        - data: (list) the data to encode.\\n        Return the world encoded (str)"""\\n        final = f"{self.name}::::{self.level}====="\\n\\n        for chunk in data:\\n            coord_dico = chunk[0]\\n            final += f"{coord_dico[\\\'x\\\']};{coord_dico[\\\'y\\\']};{coord_dico[\\\'e\\\']}|"\\n\\n            list_blocks = chunk[1]\\n            for block in list_blocks:\\n                b_type = block[0]\\n                nbt = block[1]\\n                final += f"{b_type}>{nbt};"\\n            final = final[:-1]\\n            final += "<<|<<"\\n\\n        final = final[:-5]\\n\\n        return final\\n\\n    def generate(self):\\n        ...\\n\\n########################################################################################################################################################################################################################\\n########################################################################################################################################################################################################################\\n########################################################################################################################################################################################################################\\nclass Translation(object):\\n    def __init__(self, lang):\\n        self.lang = lang\\n        try:\\n            with open(f"utils/locale/{self.lang}.json", "r") as f:\\n                self.dico = json.loads(f.read())\\n        except FileNotFoundError as e:\\n            raise FileNotFoundError(f"Locale file \\\'utils/locale/{self.lang}.json\\\' not found.")\\n\\n    def key(self, key):\\n        try:\\n            return self.dico[key]\\n        except KeyError as e:\\n            raise KeyError(f"Unknown translation key {key} for locale {self.lang}.") from e\\n\\n########################################################################################################################################################################################################################\\n########################################################################################################################################################################################################################\\n########################################################################################################################################################################################################################\\n# Exception class\\nclass RequestAnalyseException(Exception):\\n    """Exception when analysing a request"""\\n    pass\\n\\nclass TwoPlayerWithSameUsernameException(Exception):\\n    """Exception when 2 players or more have the same username"""\\n\\nclass Command(object):\\n    def __init__(self, command: str, source: Client, server: MCServer):\\n        self.COMMANDS = {"/msg": self.msg,\\n                "/tell": self.msg,\\n                "/stop":self.stop}   # other will be added later\\n\\n        self.srv = server\\n\\n        self.command = command\\n        self.source = source\\n        self.splited = self.command.split(" ")\\n        self.base = self.splited[0]\\n        self.args = self.splited[1:]\\n        self.server = server\\n\\n        if self.pre_cmd():\\n            if isinstance(source, Console):\\n                source.log(self.execute(), 0)\\n            elif isinstance(source, Client):\\n                source.send_msg_to_chat(self.execute())\\n        else:\\n            self.__del__()\\n\\n    def execute(self):\\n        try:\\n            cmdf = self.COMMANDS[self.base]\\n        except KeyError:\\n            return "Unknown command."\\n        if cmdf():\\n            ...  # ok\\n        else:\\n            ...  # error\\n\\n    def check_perm(self, base, source):\\n        # if self.base in self.source.perms:\\n        #   return True\\n        # else:\\n        #   return False\\n        return True\\n\\n    def pre_cmd(self):\\n        if self.source:\\n            self.server.getConsole().log(f"{self.source.username} used a player command : {self.command}.", 4)\\n        else:\\n            self.server.getConsole().log(f"Console runned a command: {self.command}", 0)\\n        if self.check_perm(self.base, self.source):\\n            return True\\n        else:\\n            self.server.getConsole().log(f"Denied access for the command {self.base} run by {self.source.username if self.source else \\\'Console\\\'}!", 4)\\n            return False\\n\\n    def msg(self, args):\\n        player = args[0]\\n        msg = args[1:]\\n        self.srv.mp(msg, player, self.source.username)\\n        return True\\n\\n    def stop(self, args):\\n        if len(args) != 0:\\n            self.server.getConsole().log("Too much arguments !", 1)\\n            self.srv.mp("Too many arguments !", self.source, )\\n            return False\\n        self.srv.stop()\\n        return True\\n\\nclass Console(object):\\n    """This is designed to be a fix for the current console system, that doesn\\\'t work."""\\n    def __init__(self, server: MCServer):\\n        self.running = True\\n        self.lock = thread.Lock()\\n        self.server = server\\n\\n    def log(self, msg: str, type: int = -1):\\n        """Log method with different types of log levels"""\\n        global errors, warnings, debug, info, critical, unknow\\n        if type == 0:\\n            t = "INFO"\\n            info += 1\\n        elif type == 1:\\n            t = "WARN"\\n            warnings += 1\\n        elif type == 2:\\n            t = "ERROR"\\n            errors += 1\\n        elif type == 3:\\n            t = "DEBUG"\\n            if not DEBUG:\\n                return\\n            else:\\n                debug += 1\\n        elif type == 4:\\n            t = "CHAT"\\n        elif type == 100:\\n            t = "CRITICAL"\\n            critical += 1\\n        else:\\n            unknow += 1\\n            t = "UNKNOW"\\n        \\n        time_str = gettime()\\n        text = f"[{time_str}] [Server/{t}]: {msg}"\\n\\n        try:\\n            with open(logfile, "+a") as file:\\n                file.write(text + "\\\\n")\\n        except Exception:\\n            print(\\\'Error in log system! Creating file...\\\')\\n            os.makedirs(\\\'logs\\\', exist_ok=True)\\n            with open(logfile, "+w") as file:\\n                file.write(text + "\\\\n")\\n        \\n        with self.lock:\\n            sys.stdout.write(f"\\\\r\\\\033[K{text}\\\\n")\\n            sys.stdout.write("\\\\r\\\\033[K> ")\\n            sys.stdout.flush()\\n\\n    def mainthread(self):\\n        """Process user input on the command line"""\\n        input_buffer = ""\\n        while self.running:\\n            if not(self.running):\\n                break\\n            with self.lock:\\n                #sys.stdout.write("> ")\\n                sys.stdout.flush()\\n            try:\\n                input_buffer = sys.stdin.readline().strip()\\n                if not(self.running):\\n                    break\\n            except KeyboardInterrupt:\\n                self.stop()\\n                break\\n            try:\\n                if input_buffer == "stop" or input_buffer == "exit" or "^C" in input_buffer:\\n                    self.log("Using the legacy stop command. It will be changed in the future.", 1) # Pass srv instead of None\\n                    self.stop()\\n                    break\\n            except KeyboardInterrupt:\\n                self.log("Using the legacy stop command. It will be changed in the future.", 1) # Pass srv instead of None\\n                self.stop()\\n                break\\n            else:\\n                Command(input_buffer, None, self.server)\\n\\n    def stop(self):\\n        """Stop the console and join the thread"""\\n        global srv\\n        self.server.stop()\\n        self.log("Console stopped", 0)\\n\\n# PRE MAIN INSTRUCTIONS\\nbe_ready_to_log()\\n\\n# MAIN\\nif __name__ == "__start__":\\n    try:\\n        tr = Translation(lang)\\n        state = "ON"\\n        srv = MCServer()\\n        srv.start()\\n    except Exception as e:\\n        print("FATAL ERROR : An error occured while running the server : uncaught exception (even out the main class).")\\n        print(f"{e} ({type(e)})")\\n        #log(f"{traceback.format_exc(e)}", 100) > Cause a error \\n        #srv.stop(critical_stop=True, reason=f"{e}", e=e)\\n\',\n    "ops.json": \'[\\n    {\\n        "uuid": "16dcb929-b271-4db3-9cc6-059a851fcce1",\\n        "name": LiveInGround,\\n        "level": 4,\\n        "bypassesPlayerLimit": true\\n    }\\n]\',\n    "pluginapi.py": \'import os\\nimport importlib.util\\n\\nclass Plugin:\\n    def __init__(self, name):\\n        self.name = name\\n\\nclass PluginLoader:\\n    def __init__(self, server, plugins_dir=\\\'plugins\\\'):\\n        self.plugins_dir = plugins_dir\\n        self.plugins = []\\n        self.server = server\\n\\n    def load_plugins(self):\\n        for root, dirs, files in os.walk(self.plugins_dir):\\n            for file in files:\\n                if file == \\\'plugin.py\\\':\\n                    plugin_path = os.path.join(root, file)\\n                    plugin_name = os.path.basename(root)\\n                    self._load_plugin(plugin_path, plugin_name)\\n\\n    def _load_plugin(self, plugin_path, plugin_name):\\n        spec = importlib.util.spec_from_file_location(plugin_name, plugin_path)\\n        module = importlib.util.module_from_spec(spec)\\n        spec.loader.exec_module(module)\\n        \\n        if hasattr(module, \\\'Plugin\\\'):\\n            plugin_instance = module.Plugin(self.server)\\n            try:\\n                pi = plugin_instance\\n                if hasattr(pi, "AUTHOR"):\\n                    self.server.getConsole().log(f"Loading {pi.NAME} v{pi.VERSION} from {pi.AUTHOR}", 0)\\n                else:\\n                    authors = ""\\n                    for a in pi.AUTHORS:\\n                        authors += a + ", "\\n                    authors = authors[:2]\\n                    self.server.getConsole().log(f"Loading {pi.NAME} v{pi.VERSION} from {authors}", 0)\\n                plugin_instance.onEnable()\\n                plugin_instance._enabled = True\\n                self.plugins.append(plugin_instance)\\n            except Exception as e:\\n                if hasattr(plugin_instance, \\\'disabled\\\'):\\n                    plugin_instance._enabled = False\\n                else:\\n                    self.plugins.remove(plugin_instance)\\n                self.server.getConsole().log("Plugin disabled due to issue when loading.", 2)\\n                self.server.getConsole().log(f"{type(e)}: {e}", 2)\\n        else:\\n            self.server.getConsole().log(f"File {plugin_path} does not contain the Plugin class ! Skipping...", 1)\',\n    "README.md": "# BeaconMC\\n\\n[![Website](https://img.shields.io/badge/Website-BeaconMC-blue)](https://beaconmcdev.github.io/BeaconMC)\\n[![Discord](https://img.shields.io/discord/1159181236560986112?label=discord&logo=discord)](https://discord.gg/pxkT9dtuN8)\\n[![Minecraft Version](https://img.shields.io/badge/Minecraft-1.21.8-brightgreen)](#)\\n[![Development Status](https://img.shields.io/badge/Status-In%20Development-orange)](#)\\n[![Update start.py](https://github.com/BeaconMCDev/BeaconMC/actions/workflows/build_start_py.yml/badge.svg)](https://github.com/BeaconMCDev/BeaconMC/actions/workflows/build_start_py.yml)\\n\\nBeaconMC is a Minecraft server written in Python 3 that aims to simplify Minecraft development, particularly for plugins, which are typically created in Java.\\n\\n## Project Details\\n\\n- **Compatible Minecraft Version:** 1.21.8\\n- **Development Status:** The project is currently in development.\\n\\n## Get Started\\n\\nVisit our [website](https://beaconmcdev.github.io/BeaconMC) to learn more about the project and join our community on [Discord](https://discord.gg/pxkT9dtuN8) to stay updated with the latest news and development progress.\\n\\n### Installation\\n\\nJust download start.py and run it ! ;)\\n\\n---\\n\\n## Contribution\\n\\nFeel free to contribute to BeaconMC! Whether it\'s reporting bugs, suggesting features, or submitting pull requests, all contributions are welcome.\\n\\n## License\\n\\nThis project is licensed under a license - see the [LICENSE](LICENSE.md) file for details.\\n\\n## Special thanks\\n- Website design: [Liam-gens](https://github.com/liam-gen)",\n    "requirements.txt": \'nbtlib==2.0.4\\nnumpy==2.0.1\\nPyYAML==6.0.2\\ncryptography\',\n    "SECURITY.md": \'# Security Policy\\n\\n## Supported Versions\\n\\nNo secure version : the project is in developpement,\\n| Version | Supported          |\\n| ------- | ------------------ |\\n| N/A     | :x:                |\\n\\n## Reporting a Vulnerability\\n\\nTo report a vulnerability, please open an issue with the draft "report a vulnerability" or click here : https://github.com/FewerTeam/BeaconMC/security/advisories/new\\n\',\n    "server-icon.png": \'�PNG\\n\\x1a\\n\\x00\\x00\\x00\\nIHDR\\x00\\x00\\x00@\\x00\\x00\\x00@\\x08\\x06\\x00\\x00\\x00�iq�\\x00\\x00\\x00\\tpHYs\\x00\\x00\\x0e�\\x00\\x00\\x0e�\\x01�+\\x0e\\x1b\\x00\\x00\\x04�iTXtXML:com.adobe.xmp\\x00\\x00\\x00\\x00\\x00<x:xmpmeta xmlns:x=\\\'adobe:ns:meta/\\\'>\\n        <rdf:RDF xmlns:rdf=\\\'http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\'>\\n\\n        <rdf:Description rdf:about=\\\'\\\'\\n        xmlns:dc=\\\'http://purl.org/dc/elements/1.1/\\\'>\\n        <dc:title>\\n        <rdf:Alt>\\n        <rdf:li xml:lang=\\\'x-default\\\'>Design sans titre - 1</rdf:li>\\n        </rdf:Alt>\\n        </dc:title>\\n        </rdf:Description>\\n\\n        <rdf:Description rdf:about=\\\'\\\'\\n        xmlns:Attrib=\\\'http://ns.attribution.com/ads/1.0/\\\'>\\n        <Attrib:Ads>\\n        <rdf:Seq>\\n        <rdf:li rdf:parseType=\\\'Resource\\\'>\\n        <Attrib:Created>2024-06-11</Attrib:Created>\\n        <Attrib:ExtId>cd299427-40cc-4766-8494-1d9318d292c8</Attrib:ExtId>\\n        <Attrib:FbId>525265914179580</Attrib:FbId>\\n        <Attrib:TouchType>2</Attrib:TouchType>\\n        </rdf:li>\\n        </rdf:Seq>\\n        </Attrib:Ads>\\n        </rdf:Description>\\n\\n        <rdf:Description rdf:about=\\\'\\\'\\n        xmlns:pdf=\\\'http://ns.adobe.com/pdf/1.3/\\\'>\\n        <pdf:Author>FewerElk</pdf:Author>\\n        </rdf:Description>\\n\\n        <rdf:Description rdf:about=\\\'\\\'\\n        xmlns:xmp=\\\'http://ns.adobe.com/xap/1.0/\\\'>\\n        <xmp:CreatorTool>Canva (Renderer)</xmp:CreatorTool>\\n        </rdf:Description>\\n        \\n        </rdf:RDF>\\n        </x:xmpmeta>�\\n�"\\x00\\x00\\x18�IDATx��y���u�?������J�@�[\\x12\\x08��\\x11H���\\x07�bcLlB���)�x&�\\x13\\x1bOf��\\\\S��2c�\\\'61cb�q�\\x17\\x06\\x13��0��X\\x12�\\x01#\\x10bQK-�W��z{�o�w�xKw�n\\x016���z�����;�{�=�{Ϲ?����\\x0e\\x0f��\\x16�=~�\\x010��\\x1bj�\\x0f\\x02��\\x05L!��d0\\x0c\\x03�V\\x0bR\\x1d⭊\\x01Zk�  [*�u\\x1c\\x0c!P\\x1a\\x0c\\x01m�$��\\x141�z+DY6�T\\x004 \\x00���,\\x14X�=К�d��T\\n�5��\\x02���\\x14��X��L\\x06�4\\x11��7\\n\\x00�5n\\x10�-\\x16�u+\\x16o�\\\'�Ȥ�M��Mk\\x00eK%�\\\\\\x07�5M�8��4�X�\\x0e�5�\\x14\\x00\\x1c�g��\\\'���5��\\x14��4�a\\x00\\x02!*\\x00!\\x04���h�����b�\\x19�!Ԛfۦ+�@ܶ�o�G�a\\x00h�떜u\\x1d\\x0c)i���HW���\\\\���<=M\\x19ZRqf�2\\x06��D���Q\\n\\x02Z�qZ�i�(b�\\\\&[.\\x11(Eڲ�L��$\\x12u�ި�\\x1bg\\x01\\n8��T�P�xW*M[*�eV��Z��M�\\x00ː���\\x04\\x0c!�-\\x0b;\\x0c\\tTD:\\x16C\\x08�e�td2���d�\\x1eqla�L�@G:CC<��oL\\x06��=@k�\\x13\\x04L\\x17\\n�y.�\\x10�&�t�"�-�\\\\,���An�ծ\\x01�\\x149�a�P�U\\x11qä3��%���=�u\\x01P\\x13�\\\\����c@=�/�x�\\x15J^@�\\x14�a\\x10�\\x0c\\x0c)\\x10B���\\n\\x1eA�CGE���L��A �x�����,�KdKeJa@�0hO�hN&1\\n��\\x05�\\x16է\\nyf]\\x17�0hM$�Hg0\\n��,s\\x05��O��ı,Ϗ,0�s�\\x1a�A_w���;�rV\\x03?�l\\x08ƸY�M�}\\x16\\x11\\x16@��h\\x04�\\x07��\\t��b�6WqX��Қ��2Q,P\\x0c\\x02,!�H%iM�_7\\x10g\\x04���2G�f)\\x04\\x01��\\x18k2iZ�)LӬ�_���͟\\x0fpx4��D�PiL)����\\x1fU�[\\x15�L\\x04�$��Qܠ\\x1f�V�/�EP�^W�.$Qf/��/0R�,]"�" E�%[.��y�BҖHОN\\u05fd��\\x06@kM��ɖ\\nL\\x14K\\x14����4��[�)^��o=r�C#\\x0b��kg([�5m���\\x16Fg���� �\\x05oY��\\x1a��i���X<�\\x0e��l�S�\\x14Yװ\\x02�J�B�\\x7f��DV��\\x0b\\x02N\\x15��=\\x1f��#��-�&f�˼�U\\x01�Z3_r82=˩|��T������R\\x18R���"���]\\x16J>�\\x1f���S��\\t\\x16���� -��bбѤ�k���G��}��R\\x1d\\x1e��D\\x03v�\\x15ȶ�`4�E\\x1aI^\\x0b%r|��R��r���O�i�uM\\x07�������Dk�S�Np��54�,.Z�E&\\x11\\x7fUj�5<|�\\x14\\x0f<7��T\\x11�k!S���N\\nzw4��#ح�f��$]j\\x0cS*�\\x06�#��}ɛyQ��.�0���O�\\x05���W�\\x01PJSt\\x03��E� �Hv��<�0��c\\x1fZ1u.\\x03@i���0\\x1a\\x01v�y����1�3)v��)�\\x04}�Gi��\\x06|��q\\x16JA�S��\\x7f[\\x0b7��FG�{\\\\��\\x1fS�\\x08�26�\\\\t>\\x07\\x13�b�\\x7f�[��dz�=��\\x19<��\\x19�6�����a�\\x08���<q�$�\\x1a\\x1aŋ\\x14\\nhJS����&\\x11O��;˖�R�{��#\\x08�\\n5\\x15�\\x1c1B3NK2A\\x7f{\\x13g�6іI!��\\x07�c�<��N�oj���"�h@PЕ%,*�\\x19RpVo#;7�rՖ���\\x01Z��&\\x1d\\x1eE\\x08\\x13�RΠQ�,\\x1d<(��\\x0f�\\x7fC`�Xc��~[7�6���ơ�����8�\\x06\\x06)y\\x1e�)#�s\\x08�%\\x1e�sj��m�|��O!V���\\x00��\\x03�1�dCW\\x17G��\\x08�\\x08�D�I\\x16��E�ަ4�mXK�����1~U.\\x10��9`IA�c`e\\x15�\\x19��QXR��#Ş�غ����(�\\t\\n�c�\\x1eD\\x06�\\x04\\x18�E�q��I����\\x1aF]\\x0f7\\n뾤�F)yOc;\\x1b|��N\\x0e��吥<2?�\\x08}\\x0c)�~��ޱ�;�\\x7f\\x0f�B�/���\\x15\\x018-W\\x08�4\\x0c��t\\x0e���rlt���\\t�n�FJ\\x14���l��|�i\\x19��\\x13�,\\x0c�8yʰI��i]\\x13cO��5�\\x14q)�\\x00M\\x08\\x12�\\x1bI\\x04��\\x0bp\\x1b�g\\x1e(\\x02e\\x151�\\x18.\\x15Q�%.�:\\x00\\x1a�aD8��K�y��\\x04�\\\\Ğ\\x1eC�e�\\x18[�ne�Ν������a�l>�j�<\\x1d�%�+\\x19�s��Ml^����\\t^\\x1e\\x19��|2ʧ�-���7�S\\x0c�DR3o�\\x12ੈH+ↁ\\x13������lm�h\\x1c Q��\\x0e���\\x1c\\x10j���bʬ�c+�q\\x04��@y\\x16��\\x14^a\\x1e\\x02\\x1f�0�h�v.\\u07be����\\x0e\\x1a(�J�A�j\\x08�\\x0c��u\\x12$� f����������I���!�E�:�,,��f[ޠd�X\\\\��\\x04_)&\\x1c�Y�ǋ\\x14�\\x06\\x13_\\x1a��Њ���H��\\x08B!p���B��R\\x01�5�V�~��rEy\\x19)��\\x02jr\\x04�-#�d�֭\\\\������R��W�ѫ�?VY\\x02��\\x18X������q�:��#?��\\x0fh55)�S\\x16\\x16v\\x18#]4p�\\x11��\\x12�I��T��b���\\x02�S\\x19\\x1a\\n��R�\\n\\x03\\n��\\x08G\\x08f��q��\\x1fE�C����\\x17Cz\\x0b`(\\x08��Pn\\x19\\n\\x0cxeʩ\\x04�ݻ�t<��u\\x17\\n�z�<�/�P��\\x17M\\x10��Qľg\\x0f�\\u07fb�\\nk�0\\x14\\x05�=;Ʌ�\\x06v�St���\\x0e�0�\\x13��h\\x12:\\x11��1�\\x12�\\x02L4�f�vi�b��h�\\x06�&�\\x15G\\x02�����xt:�\\x1e����s8�#h�!Ds*�9�;L\\x05>}�䪊�tYL��\\x11\\x00��{�֚H)\\x0e\\x1cz��t\\x1a�5s�<\\x1bXCڴh�c\\x0c\\x05\\x1e\\\'\\x03��V���I�M�\\x0e\\x15�\\t�|dc-(�y��8�L�|M�h�&3*D\\x03��AQGXJ�����\\x05f�\\t���(�A\\x03\\\'\\x02�Aߣ�\\x15hMʰ0k��� ���\\x15b\\x00\\x15�k���8�R\\t/\\x08\\x18�f�ꢋ\\x08#��^W�\\x02B�H�1\\x16��\\x1b&��\\x1b�\\x06�tH�$��؎�:G3\\x15��d�\\x12\\x1a��\\x05z\\x1dXW�\\x08���38\\x13#h�%D3^���5Q-cWɓ��yF\\x05M\\x0b+����\\x18\\x04��\\x08W�<��0�-W^J�)a[6餵���\\x02V�k\\x1a�\\x18���C��Ҭ\\x17\\x06\\x1b�\\x18m�\\t"IQ��\\x10)vD\\x16�x�Z�E�Q�L͍�M�����\\\'tȠ璏"Җ��5\\x0b�W�\\x0fjr�yXv\\x1c)\\n�\\x03\\x00@U�m�]�V�L2AOG���d�S��i�4-���Q���f�S��N���\\x14}v�fU��K\\x10��%+Lnv���c\\x04N�\\x00\\x18\\x0f}N�>1�B�\\x06��m�\\x00�c1B�(x\\x01h\\x1b\\x15U"���V\\x11�W~�\\x00�$\\n&�1.�߸b��y@�m#��i�\\x1e�c\\x08�\\x13��\\x02��d\\n\\\'\\ny�+�[bk,�6;�;?C�S���x�<��\\x13����#\\x042�E��\\x146\\\\S�4LB��.��N\\x0b��\\x1d���k�:3\\x00aࡢ�\\x03 ^\\x11XV݁y\\x10.h2]&��8I��@�6M�f�ȅ>ǋy���ap�\\\\�n�g�\\x12o#AK(�]��R�s��w��\\x04�Ҡ߰p,\\x0b�1�]��\\\\���\\nX�J��\\x16Z�ʕǪ���\\x1dK�Z�g\\x199\\x16B�?x�JY���Ͼ���)F_��E�I�i�\\x13�B�l������t\\x13i����\\x10j������V8U�\\x02V�e\\x13Z\\x16"f�\\x158�\\x06voy\\x1b�JCe1SW��\\tO}�h�kh�-�Ӳ�\\x08C��ϊK`��\\x17�4h�\\x0b"��\\x16���xrp�����y�no!\\x05D�\\x07$\\n��x�b\\x18�u\\x1d�0ď*T��AE\\x1bKJҖ�zӦI\\x1a�x�\\x180���~�y̕|l\\x19�\\x11\\x04�D\\x08P��\\x17\\x1e�\\x15�\\x1bD\\x0b�J��h�UG��\\x0f�\\x02 ^A�j\\nO-���=�!��.��|�o��\\x0c�)\\x030Q��C!�X���\\x08Q�<2-<\\x1daKI�e�!E��pn�N��6-)���Qib\\x02j��r`q�C�ِɱ{����\\x16B߬+�5�(�\\x10�\\x02{�\\x19hܵL�\\n�Y��3\\x03��:�t���0�\\x0eͣ�<;<�i*ҝ��\\\\�\\x98�ܩ8\\x08xy��}[\\x15V��A\\x13���X�R\\x182��չ\\x05���R�-dK�6;�0,B�&\\x0e�\\x08�f\\x1c�\\x1a���b<3�B!H,\\x1aFG���T�EK��+\\x1aT�\\x12,W$B��^�\\x13�0��C�4��`v4�\\x84B���\\x1ci\\x08�&\\tX��\\x10"]Y���$n\\x14!��>�!\\x04ͱ8m\\xa0!�;+[�$� �)���\\\\\\x0b����7\\n�\\x18G\\x14�H�,�\\x10���\\x00��c�\\x19v��?\\x0f#��S��+4Q$Q��X�<~�\\x08�h��\\x04Jk,)1k\\n\\x14\\x01R\\x08l)��B*�Q��\\x03\\x0b6/�\\x1a()��<���\\x1c\\x10�a\\x0cs���/��K\\\'�,vp�;@��\\x01��\\x01@C�ZR��\\x15;+ok\\x15�Z�7�\\x7f�X\\U00034924�\\\\��\\n`�,\\x1a[2HC20\\x1f�Ņ֊�,��\\x14>��%4���m��m}��v�\\x17i#\\n鋖e�ZI�u\\x07�e�\\x0bغ��G^�\\x02\\x04}]\\x19�79�jr�h*�.�AUJ�\\x01Eä��\\x06Es7��e�ܕWi\\x18�\\nmT�մL�i\\x10F0�k\\\\Lǀ)#�3Y\\\\���� \\u05ee{��Ӆj�\\\\��n|\\x072��R\\x04jm��\\x08ӪK`��p��\\x1e���\\x10\\x0bN�5��0,��q� Ǜ��eq;�|��IICF�\\x01��$Ń<\\x1e|��uղ�+M�t�\\tY��%\\x1c@#�u$�6��tl��M-��h=��o�Gg�A�\\\\�\\n��֢�n����ӈ[-\\x06�ך\\x05\\x1c?"�R��I��!�_~`;_�ы�Zq�>���\\x07�Zq�{�{\\x0bW2z�.\\x1a�\\x1dH5N�p0����\\x19��d}��:�R\\x11Z)��@)�|�y/�\\x0c��\\n9v�\\x1f�\\x13}?����4Zh������\\\\��cś\\x10������4�\\x1a=��E��9��p\\x19�5;64��uE���w�����K5\\x08���,���C6|�i��^y\\nK���EN��,��P\\x0c+��(�(\\x16r������\\x15��(\\x05Fݫ\\x05��d��:�Ŭ\\x06\\x04�5\\x03�F�1x\\x0e��ZO�\\x03\\x0f��wy>�o?ȵ7�\\x13۶PJ�������Z�}\\x1d1 a\\x1b\\x08�WD�#\\x1f��\\x07~�\\x10h͞\\x0bS��]�«\\x05�f�\\x0e\\x06��cQ%C!A0��\\\'\\x10�R\\n�\\x0cyZ�ڍ"��G�\\x03ZT�\\x12\\x11\\\'J�$�R�>\\x1a&�8\\x7f�˫��i��.{��q���q�G\\x1f��\\x0f��{�|����}�a�6\\x1f��:�<s\\x0c8�g\\x1a\\x136]M\\t�\\x15�@CC�Dʧ�.Ж���F\\x15�l�ڪZ,��F\\x08\\n�H�\\x14���x���4�L#R\\x1ah���\\\\�}\\x0f_EXV��\\x0c\\x13����.�\\x15��������\\x02��[�/��16}���a�j�|.��������h�z\\x1a<\\n\\x007�V]/ZGh��h�`�xztB�?����6�ȬST�!R\\x06��$�N�b\\x18���\\x1c��VyE�@)"���<���ǆ�\\x18Bď �@/)j&����\\x12Qb\\x1b\\u07fcg���k�\\x0f)Dei���s�5�p�e�\\x01`�\\x06���n�\\x19\\x01(y\\x11��O�\\x01\\x00Q\\x14\\x10\\x04.\\x00�t�S/���!��U>���\\x18;os��ǚ�\\x0bL4�c^;C~#���}\\x7fE!\\x04ૈ@+<�(\\x1bӸ�\\x04J\\x06DS%�r��Zu)����\\x1f�Ͼp������d�~���{ɤ\\x17�`�21�|�{�j\\x1f ҫ\\x04\\n�*\\x13ix�%���j�\\x17���e���m����ȏ\\x1fx����\\x1c_��&>xc3S��Ô\\x1f.Qvy���_-�\\x15\\x03\\x1f����a��A\\x1as6G[ac\\\'8e�ÿ\\n�˻\\n\\x0c\\x0c\\x07D*�\\x105�,�_�q�]�l��G\\x14\\x11����k�\\x0b�(g\\x14F�j`�=�m&�H,�V��Ba�I���u����\\x02w��\\x14\\x1b�H�g�97��i���,�<=�W�8���\\x1d�o����~d<�j\\tKW\\u05cc76I��\\x17qN����\\x10\\x05��\\x17\\x14�_����PR\\x08a\\x03!5. �D\\x08ɻ������\\x1e)%G��y��c\\x0c\\x0c��x�\\x15\\x01\\x00ش��ɹ\\x05�;>̡�����e��M�56p�-�0=5��L\\t��\\x13D��Sp�G$7\\\\�ȖM7R(-��a\\x08�����i���7���i{��t�k/ZT\\x0e+,n+\\x04��\\x04�\\x0f��\\x1d���$�>Q\\x14`�IB�\\x19�\\x081�U��\\x08\\x04��\\x11Rp�Y\\x1b��\\\'n�����(?:�8�\\x06�ќ��휍��]t���\\x08��\\\'D� ���)���2G&����l�Y��}\\x18Z����_�������\\x08\\x12\\x0bˈ��ԃ�\\x17�\\x15&\\x11��4c\\x08!���0t��L���m�w3�\\\\x\\t��\\x1c^�̽�����\\x03����\\x15P:"�>��0�U!NhL3F��\\n\\x19\\x12��\\x1b7r��������y�yx?\\x03�#�aĥ۶��w^���\\x0e�3\\x1c�Z��\\x10�v��#<;8���\\x02�ǖu����GK��\\x07?�����78��Qb�\\x14���2^PF\\x08I,�B�\\x10�/�H%q�e�0X\\x7f��\\\\��?%Q�!�/�ȷ\\x1f������3�%"\\x04�x\\x03��ɗ�\\x08!��$��H!����������>��t��\\x7f�(\\x07\\x07�a�\\x16\\x17n>��\\\\��M���u��ȫ\\x1e�Ӻ\\x12@�gfy��C\\x1c��\\x06\\n\\x1b�ڹz�6z�Z���\\x1fr�W���1�V\\x03\\x0b�\\t\\\\��e�+\\x11>�����9&O�����\\x076l?��?�i\\x12�YJ3Y���_$��*��HaМ�&�\\x02"\\x1d�TD\\x10z�?���o���nz\\x1fc�Y�}d?G�F\\t��=�ˍo��u�\\x1d\\x18�k?E��gɄ\\x10\\x18�����ۮy\\\'\\\'\\\'�x��c�0<Ɲ\\x0f��\\n\\x1dm\\\\~���}�������o~��=<�e�p�\\x1c[�_Ȏ]��������\\U0003defe�d�W�\\x1e*"�40�\\x18a��8~\\x11�$㍬����}�?�Э\\x0cOM�{��б��,��[�y�{�سn�\\x0e�o\\x04��!����N���dj~��\\x1c<��c\\x13|�珱���w]p.���<z�1��ʝ���\\x0fbZ��>p#w|�aZ\\x16��\\x0e�Bɧ�\\x04�2��\\x12-!\\x04a�e�\\x16>{��s͵Wqrb����wsdh\\x04�5{/<���MoWg��ӯ���\\x7fV����.�x�� O\\x0c\\x1c�\\x0fC:\\x1a2��|\\x0e\\x17���\\x0b�\\x0f�_���B���\\x06\\x19|q\\x00��m��?�\\x0c��8�\\\\����Ut\\x04�r1\\n����|�S���?����S���\\x01\\x0e\\x1f?Iܶ�hK\\x1f�ݻ��k�\\x7fm��\\x10\\x00���5�R�_�p��Ǉȕ]ZRI.?���6m`��Q����w�}�\\x0b\\x05zϫ\\x00`\\x17�x�s|�Kw\\x10�>}�����?�\\n7\\\\Ǳ�S����9:2\\x06\\x02�ܱ�w﹄u��o�Iqx�\\x00�Z�JSt\\\\\\x0e\\x0e�䧇^�����1.�;�+��gv:����Wx����c�a�\\x14�Y�x�g|�O?�\\x07n�=\\x06�Gy`��<}�\\x04����-��x����\\x08�\\x06?8�<1�\\x01��x��\\t\\x1e\\x7f�\\x18S�\\x02����6�����1zj�\\x1f\\x1fz��\\x11b��?|�Ü\\x18��}�119�eHvl;�kv_�ڎ�7��\\x1co�CSA\\x10�܉!\\x1e>�\\x12��\\x12��$�-����35:\\x02�O{K\\x0b\\\'�\\\'\\x08�`϶�ܰ��:s{�\\x1f�zK\\x1e��\\x1a�0䥑1^8>���\\x1c\\x00Sc#8�"�a���\\x0b��❬io}S-���=7\\x08�{�\\\'�\\\'x�� \\x03\\x03\\x03l\\\\�ŵ�\\uf86d��"�[��\\\\m��\\x00,\\x1dQ�(:e\\x1aR�� o���[\\x03����;����\\x03g\\n�u�s:�\\x00\\x00\\x00\\x00IEND�B`�\',\n    "whitelist.json": \'{}\\n\',\n    "libs/crash_gen.py": \'# BEACONMC 1.19.4\\n# =========================\\n# =========================\\n# Crash Generator\\n# (C) BeaconMC Team\\n\\n\\nimport traceback\\nimport os\\nimport sys\\nimport random\\nfrom datetime import datetime\\nimport json\\nimport platform\\n\\nTOTAL_PLUGIN = 0\\ndef gen_crash_report(MC_VERSION, BMC_VERSION, e):\\n    global TOTAL_PLUGIN\\n    with open("config.json", "r") as f:\\n        config = json.loads(f.read())\\n        online_mode = config["online_mode"]\\n\\n    date_str = datetime.now().strftime("%m-%d-%Y")\\n    file_number = 1\\n    file_name = f"crash_reports/crash_{date_str}_{file_number}.txt"\\n    while os.path.exists(file_name):\\n        file_number += 1\\n        file_name = f"crash_reports/crash_{date_str}_{file_number}.txt"\\n\\n    with open(file_name, "w") as f:\\n\\n        plugin_list = ""\\n        for p in os.listdir("plugins"):\\n            plugin_list += f"- {p}\\\\n"\\n            TOTAL_PLUGIN += 1\\n        json_info = json.dumps({"mc_version": MC_VERSION,"bmc_version": BMC_VERSION, "os_name": os.name,"date": datetime.now().isoformat(),"python_version": sys.version,"total_plugin": TOTAL_PLUGIN, "online_mode": online_mode,"traceback": traceback.format_exc()}, indent=4)\\n        f.write(f"""\\n=========================================\\n        BEACON-MC CRASH REPORT\\n=========================================\\nSomething went wrong, please submit the report on the issue tracker.\\nhttps://github.com/BeaconMCDev/BeaconMC/issues/new?assignees=&labels=bug&projects=&template=bug_report.md&title=\\nTraceback :\\n{traceback.format_exc()}\\n=========================================\\nOS : {platform.system()}\\nPython Version : {sys.version}\\nBeaconMC Version : {BMC_VERSION}\\nMinecraft Version : {MC_VERSION} \\nPlugins List : \\n{plugin_list}\\nDate : {datetime.now()}\\n\\nNOTE : Please **dont touch the error file if you want to use our debug tools !!!**\\n=========================================\\nJSON Info :\\n{json_info}\\n        """)\\n    f.close()\\n    print("\\\\n")\\n    print("================================================================")\\n    print("BEACON-MC CRASH REPORT")\\n    print("> A crash report has been generated in the crash_reports folder.")\\n    print("> Please submit the report on the issue tracker.")\\n    print("> Thank ^^")\\n    print("================================================================")\\n    print(f"Crash report saved on logs/{datetime.timestamp(datetime.now())}")\\n\\n    print(f"ERR : {traceback.format_exc()}")\\n    exit(1)\\n\',\n    "libs/mojangapi.py": \'# =========================\\n# BEACONMC 1.19.4\\n# =========================\\n# Mojang API\\n# (C) BeaconMC Team\\n\\nimport requests\\nimport json\\n\\n\\nclass MinecraftAccountVerificationError(Exception):\\n    pass\\n\\n\\nclass Accounts(object):\\n    def exists(self, username):\\n        """Check if the account exists"""\\n        try:\\n            response = requests.get(f"https://api.mojang.com/users/profiles/minecraft/{username}")\\n            response.raise_for_status()  # Raise an exception for bad responses (4xx or 5xx status codes)\\n            json_data = response.json()\\n            return True\\n        except Exception as e:\\n            return False\\n\\n    def check(self, username):\\n        \\\'\\\'\\\'Check authenticity of an account\\\'\\\'\\\'\\n        try:\\n            with open("libs/requests/authcheck.json", "r") as f:\\n                data = json.loads(f.read())\\n\\n            response = requests.post(url="https://authserver.mojang.com/authenticate", json=data)\\n            response.raise_for_status()  # Raise an exception for bad responses (4xx or 5xx status codes)\\n            print(json_data=response.json())\\n\\n            return True\\n        except Exception as e:\\n            print(e)\\n            return False\\n\\n    def authenticate(self, username, uuid):\\n        try:\\n            response = requests.get(f"https://api.mojang.com/users/profiles/minecraft/{username}")\\n            \\n            if response.status_code == 200:\\n                profile = response.json()\\n\\n                if profile[\\\'id\\\'] == uuid.replace(\\\'-\\\', \\\'\\\'):\\n                    return (True, "")\\n                else:\\n                    return (False, f"UUID doesn\\\'t match. Receivt: {uuid}, expected: {profile[\\\'id\\\']}.")\\n            else:\\n                return (False, f"This username doesn\\\'t exist ({response.status_code}).")\\n\\n        except Exception as e:\\n            raise MinecraftAccountVerificationError from e\\n\\n\\nif __name__ == "__main__":\\n    acc = Accounts()\\n    acc.check("EletrixTime")\\n    \',\n    "libs/cryptography_system/system.py": \'"""BeaconMC cryptography file\\nFOR SOME SECURITY REASON, IT IS VERY NOT RECOMMENDED TO MODIFY THIS FILE.\\nFOR ANY SECURITY FLAW, please contact me on https://github.com/FewerTeam/BeaconMC/security/advisories/new or at FEWERELK@GMAIL.COM, or open a ticket on DISCORD."""\\n\\n# IMPORTS\\nfrom cryptography.hazmat.primitives.asymmetric import rsa, padding\\nfrom cryptography.hazmat.primitives import serialization, hashes\\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\\nfrom cryptography.hazmat.backends import default_backend\\nfrom cryptography.hazmat.primitives import padding as sym_padding\\nimport os\\nimport traceback\\n\\nclass CryptoSystem(object):\\n    KEY_HIDDEN_MESSAGE = b"403\\\\nKEY HIDDEN FOR SECURITY REASONS. IT WILL BE WRITTEN HERE ON SERVER STOP (final action to prevent plugins accessing it)."\\n    PATH = "libs/cryptography_system/"\\n\\n    def __init__(self, server):\\n        """Load public and private keys. Hide private key for security reason."""\\n        self.server = server\\n        try:\\n            with open(self.PATH + ".private_key.pem", "rb") as skf:\\n                self._private_key = skf.read()\\n                try:\\n                    self.__private_key__ = serialization.load_pem_private_key(\\n                        self._private_key,\\n                        password=None,\\n                        backend=default_backend()\\n                    )\\n                except ValueError as e:\\n                    self.server.getConsole().log(f"Failed to load private key: {e}", 2)\\n                    self.server.getConsole().log("Do you want to create a new one ? (y/n)", 2)\\n                    r = input()\\n                    if r == "y":\\n                        self.generate_keys()\\n                    else:\\n                        self.server.getConsole().log("Failed to secure the network.", 1)\\n                        self.server.getConsole().log("Please ensure this is quickly fix to prevent security flaws.", 1)\\n                    raise\\n                except Exception as e:\\n                    self.server.getConsole().log(traceback.format_exc(), 2)\\n                    self.__private_key__ = None\\n\\n            with open(self.PATH + ".private_key.pem", "wb") as skf:\\n                skf.write(self.KEY_HIDDEN_MESSAGE)\\n\\n            with open(self.PATH + "public_key.pem", "rb") as pkf:\\n                self.public_key = pkf.read()\\n                try:\\n                    self.__public_key__ = serialization.load_pem_public_key(\\n                        self.public_key,\\n                        backend=default_backend()\\n                    )\\n                except Exception as e:\\n                    self.server.log(traceback.format_exc(), 2)\\n                    self.__public_key__ = None\\n\\n            with open(self.PATH + "public_key.pem", "wb") as pkf:\\n                pkf.write(self.KEY_HIDDEN_MESSAGE)\\n\\n            if self.null_keys():\\n                self.generate_keys()\\n        except FileNotFoundError:\\n            self.generate_keys()\\n\\n    def null_keys(self) -> bool:\\n        """Check if keys exists or not (in project variables)."""\\n        null = (None, "", " ", "None", "none", "null", "Null")\\n        if self._private_key == self.KEY_HIDDEN_MESSAGE:\\n            # The initial key was not restored.\\n            return True\\n        if self._private_key in null:\\n            return True\\n        if self.public_key in null:\\n            return True\\n        return False\\n\\n    def stop(self):\\n        with open(self.PATH + ".private_key.pem", "wb") as skf:\\n            skf.write(self._private_key)\\n        self._private_key = " "\\n        del (self._private_key)\\n        self.__private_key__ = ""\\n        del (self.__private_key__)\\n\\n        with open(self.PATH + "public_key.pem", "wb") as pkf:\\n            pkf.write(self.public_key)\\n        self.public_key = " "\\n        del(self.public_key)\\n        self.__public_key__ = " "\\n        del(self.__public_key__)\\n\\n        del(self)\\n\\n    def generate_keys(self):\\n        self.__private_key__ = rsa.generate_private_key(\\n            public_exponent=65537,\\n            key_size=2048,\\n            backend=default_backend()\\n        )\\n\\n        self._private_key = self.__private_key__.private_bytes(\\n            encoding=serialization.Encoding.PEM,\\n            format=serialization.PrivateFormat.TraditionalOpenSSL,\\n            encryption_algorithm=serialization.NoEncryption()\\n        )\\n\\n        self.__public_key__ = self.__private_key__.public_key()\\n\\n        self.public_key = self.__public_key__.public_bytes(\\n            encoding=serialization.Encoding.PEM,\\n            format=serialization.PublicFormat.SubjectPublicKeyInfo\\n        )\\n\\n    def encode(self, data: bytes, secret: bytes = None) -> bytes:\\n        """\\n        Encode data using RSA (if secret is None) or AES (if secret is provided).\\n\\n        :param data: Data to encode.\\n        :param secret: Shared key for AES encryption\\n        :return: Encoded data.\\n        """\\n        try:\\n            if secret is None:\\n                if not self.__public_key__:\\n                    raise ValueError("Public key not loaded.")\\n                # Chiffrement RSA avec OAEP padding\\n                encrypted = self.__public_key__.encrypt(\\n                    data,\\n                    padding.OAEP(\\n                        mgf=padding.MGF1(algorithm=hashes.SHA256()),\\n                        algorithm=hashes.SHA256(),\\n                        label=None\\n                    )\\n                )\\n                return encrypted\\n            else:\\n                # Chiffrement AES en mode CBC avec PKCS7 padding\\n                if len(secret) not in (16, 24, 32):\\n                    raise ValueError("Secret key must be 16, 24 or 32 octets lenth.")\\n                \\n                iv = os.urandom(16)  # IV de 16 octets pour AES\\n                cipher = Cipher(algorithms.AES(secret), modes.CBC(iv), backend=default_backend())\\n                encryptor = cipher.encryptor()\\n\\n                padder = sym_padding.PKCS7(128).padder()\\n                padded_data = padder.update(data) + padder.finalize()\\n\\n                encrypted = encryptor.update(padded_data) + encryptor.finalize()\\n                return iv + encrypted  # Préfixer l\\\'IV aux données chiffrées\\n        except Exception as e:\\n            self.server.log(f"Error while encoding : {str(e)}", 2)\\n            return b""\\n\\n    def decode(self, data: bytes, secret: bytes = None) -> bytes:\\n        """\\n        Decode data using RSA (if secret is None) ou AES (if secret found).\\n\\n        :param data: Data to decode.\\n        :param secret: Secret key for AES decoding.\\n        :return: Decoded data.\\n        """\\n        try:\\n            if secret is None:\\n                if not self.__private_key__:\\n                    raise ValueError("Private key not loaded.")\\n                decrypted = self.__private_key__.decrypt(\\n                    data,\\n                    padding.OAEP(\\n                        mgf=padding.MGF1(algorithm=hashes.SHA256()),\\n                        algorithm=hashes.SHA256(),\\n                        label=None\\n                    )\\n                )\\n                return decrypted\\n            else:\\n                if len(secret) not in (16, 24, 32):\\n                    raise ValueError("Private key must be 16, 24 or 32 octets lenth.")\\n                \\n                if len(data) < 16:\\n                    raise ValueError("Encoded data too short.")\\n\\n                iv = data[:16]\\n                encrypted = data[16:]\\n                cipher = Cipher(algorithms.AES(secret), modes.CBC(iv), backend=default_backend())\\n                decryptor = cipher.decryptor()\\n\\n                padded_data = decryptor.update(encrypted) + decryptor.finalize()\\n\\n                unpadder = sym_padding.PKCS7(128).unpadder()\\n                decrypted = unpadder.update(padded_data) + unpadder.finalize()\\n\\n                return decrypted\\n        except Exception as e:\\n            self.server.log(f"Error while decoding : {str(e)}", 2)\\n            return b""\\n\',\n    "libs/requests/authcheck.json": \'{\\n    "agent": {\\n        "name": "Minecraft",\\n        "version": 1\\n    },\\n    "username": "{0}",\\n    "password": "{1]",\\n    "clientToken": "{2}",\\n    "requestUser": true\\n}\',\n    "src/entities/entity.py": \'from ..registry.entities import EntityRegistry\\nfrom ..location import Location\\n\\nclass Entity:\\n    REGISTRY = EntityRegistry()\\n    \\n    def __init__(self, namespace:str, name:str, id, uuid, location:Location=None):\\n        self.NAMESPACE = namespace\\n        self.NAME = name\\n        self.DISPLAYNAME = f"{namespace}:{name}"\\n        self.ID = id\\n        self.UUID = uuid\\n        self._location = location\\n        self.RGID = self.REGISTRY.getProtocolID(id)\\n        \\n    @property\\n    def location(self):\\n        if self._location == None:\\n            raise ValueError("No location provided")\\n        return self._location\\n        \\n    @_location.setter\\n    def location(self, value:Location):\\n        if not(isinstance(value, Location)):\\n            raise TypeError\\n        self._location = value\\n\\n\',\n    "src/events/event.py": \'class Event:\\n    def __init__(self, event:str):\\n        self._eventType = event\\n        self._cancelled = False\\n        \\n    @property\\n    def cancelled(self):\\n        return self._cancelled\\n        \\n    @_cancelled.setter\\n    def cancelled(self, value):\\n        if not(value):\\n            raise ValueError("You can\\\'t uncancel an event.")\\n        self._cancelled = True\\n        \\n    def cancel(self):\\n        self.cancelled = True\\n\',\n    "src/events/manager.py": \'class EventManager(object):\\n    """The class for event-related management (server and plugins)"""\\n    \\n    def __init__(self, server):\\n        self._server = server\\n        self._events = {"playerJoinEvent": []}\\n        \\n    def register(self, plugin, event, wrapper):\\n        event_list = self._events[event]\\n        event_list.append((plugin, wrapper))\\n        self._events[event] = event_list\',\n    "src/registry/blocks.py": \'import registry\\n\\nclass BlocksRegistry(registry.Registry):\\n    _BASE_PTN = {\\n        0: "air"\\n        ... # i need to find the correct source\\n    }\\n    \\n    def __init__(self):\\n        super().__init__("minecraft", "blocks", self._BASE_PTN)\',\n    "src/registry/entities.py": \'import registry.py as regist\\n\\nclass EntitiesRegistry(regist.Registry):\\n    \\n    # The base registry used to convert protocol ids to names and classes\\n    _BASE_PTN = {\\n        0: "acacia_boat",\\n        1: "acacia_chest_boat",\\n        2: "allay",\\n        3: "area_effect_cloud",\\n        4: "armadillo",\\n        5: "armor_stand",\\n        6: "arrow",\\n        7: "axolotl",\\n        8: "bamboo_chest_raft",\\n        9: "bamboo_raft",\\n        10: "bat",\\n        11: "bee",\\n        12: "birch_boat",\\n        13: "birch_chest_boat",\\n        14: "blaze",\\n        15: "block_display",\\n        16: "bogged",\\n        17: "breeze",\\n        18: "breeze_wind_charge",\\n        19: "camel",\\n        20: "cat",\\n        21: "cave_spider",\\n        22: "cherry_boat",\\n        23: "cherry_chest_boat",\\n        24: "chest_minecart",\\n        25: "chicken",\\n        26: "cod"\\n        27: "command_block_minecart",\\n        28: "cow",\\n        29: "creaking",\\n        30: "creeper",\\n        31: "dark_oak_boat",\\n        32: "dark_oak_chest_boat",\\n        33: "dolphin",\\n        34: "donkey",\\n        35: "dragon_fireball",\\n        36: "drowned",\\n        37: "egg",\\n        38: "elder_guardian",\\n        39: "enderman",\\n        40: "endermite",\\n        41: "ender_dragon",\\n        42: "ender_pearl",\\n        43: "end_crystal",\\n        44: "evoker",\\n        45: "evoker_fangs",\\n        46: "experience_bottle",\\n        47: "experience_orb", # DO NOT SPAWN WITH ˋSPAWN ENTITY` PACKET\\n        48: "eye_of_ender",\\n        49: "falling_block",\\n        50: "fireball",\\n        51: "firework_rocket",\\n        52: "fox",\\n        53: "frog",\\n        54: "furnace_minecart",\\n        55: "ghast",\\n        56: "happy_ghast",\\n        57: "giant",\\n        58: "glow_item_frame",\\n        59: "glow_squid",\\n        60: "goat",\\n        61: "guardian",\\n        62: "hoglin",\\n        63: "hopper_minecart",\\n        64: "horse",\\n        65: "husk",\\n        66: "illusionner",\\n        67: "interaction",\\n        68: "iron_golem",\\n        69: "item",\\n        70: "item_display",\\n        71: "item_frame",\\n        72: "jungle_boat",\\n        73: "jugle_chest_boat",\\n        74: "leash_knot",\\n        75: "lightening_bolt",\\n        76: "llama",\\n        77: "llama_spit",\\n        78: "magma_cube",\\n        79: "mangrove_boat",\\n        80: "mangrove_chest_boat",\\n        81: "marker", # DON\\\'T SPAWN THIS ENTITY (serverside entity)\\n        82: "minecart",\\n        83: "mooshroom,\\n        84: "mule",\\n        85: "oak_boat",\\n        86: "oak_chest_boat",\\n        87: "ocelot",\\n        88: "omnious_item_spawner",\\n        89: "painting",\\n        90: "pale_oak_boat",\\n        91: "pale_oak_chest_boat",\\n        92: "panda",\\n        93: "parrot",\\n        94: "phantom",\\n        95: "pig",\\n        96: "piglin",\\n        97: "piglin_brute",\\n        98: "pillager",\\n        99: "polar_bear",\\n        100: "splash_potion"\\n        101: "lingering_potion",\\n        102: "pupperfish",\\n        103: "rabbit",\\n        104: "ravager",\\n        105: "salmon",\\n        106: "sheep",\\n        107: "shulker",\\n        108: "shulker_bullet",\\n        109: "silverfish",\\n        110: "skeleton",\\n        111: "skeleton_horse",\\n        112: "slime",\\n        113: "small_fireball",\\n        114: "sniffer",\\n        115: "snowball",\\n        116: "snow_golem",\\n        117: "spawner_minecart",\\n        118: "spectral_arrow",\\n        119: "spider",\\n        120: "spruce_boat",\\n        121: "spruce_chest_boat",\\n        122: "squid",\\n        123: "stray",\\n        124: "strider",\\n        125: "tadpole",\\n        126: "text_display",\\n        127: "tnt",\\n        128: "tnt_minecart",\\n        129: "trader_llama",\\n        130: "trident",\\n        131: "tropical_fish",\\n        132: "turtle",\\n        133: "vex",\\n        134: "villager",\\n        135: "vindicator",\\n        136: "wandering_trader",\\n        137: "warden",\\n        138: "wind_charge",\\n        139: "witch",\\n        140: "wither",\\n        141: "wither_skeleton",\\n        142: "wither_skull",\\n        143: "wolf",\\n        144: "zoglin",\\n        145: "zombie",\\n        146: "zombie_horse",\\n        147: "zombie_villager",\\n        148: "zombified_piglin",\\n        149: "player",\\n        150: "fishing_bobber"\\n    }\\n    \\n    def __init__(self):\\n        super().__init__("minecraft", "entities", self._BASE_PTN)\\n    \',\n    "src/registry/registry.py": \'class Registry(object):\\n    def __init__(self, namespace:str, name:str, base_ptn:dict):\\n        self.namespace = namespace\\n        self.name = name\\n        self.displayName = f"{namespace}:{name}"\\n        self._BASE_PTN = base_ptn\\n        self._BASE_NTP = return {v: k for k, v in base_ptn.items()}\\n        \\n    def get_entity_name(self, id:int):\\n        return self._BASE_PTN[id]\\n        \\n    def get_entity_protocol_id(self, name:str):\\n        return self._BASE_NTP[name]\',\n    "tests/nbtfiletest": "{\'Data\': Compound({\'WanderingTraderSpawnChance\': Int(50), \\n\'BorderCenterZ\': Double(0.0), \\n\'Difficulty\': Byte(1), \\n\'BorderSizeLerpTime\': Long(0), \\n\'raining\': Byte(0), \\n\'Time\': Long(38205), \\n\'GameType\': Int(0), \\n\'ServerBrands\': List[String]([String(\'vanilla\')]), \\n\'BorderCenterX\': Double(0.0), \\n\'BorderDamagePerBlock\': Double(0.2), \\n\'BorderWarningBlocks\': Double(5.0), \\n\'WorldGenSettings\': Compound({\'bonus_chest\': Byte(0), \\n\'seed\': Long(-2769752233381312530), \\n\'generate_features\': Byte(1), \\n\'dimensions\': Compound({\'minecraft:overworld\': Compound({\'generator\': Compound({\'settings\': String(\'minecraft:overworld\'), \'biome_source\': Compound({\'preset\': String(\'minecraft:overworld\'), \'type\': String(\'minecraft:multi_noise\')}), \'type\': String(\'minecraft:noise\')}), \'type\': String(\'minecraft:overworld\')}), \'minecraft:the_nether\': Compound({\'generator\': Compound({\'settings\': String(\'minecraft:nether\'), \'biome_source\': Compound({\'preset\': String(\'minecraft:nether\'), \'type\': String(\'minecraft:multi_noise\')}), \'type\': String(\'minecraft:noise\')}), \'type\': String(\'minecraft:the_nether\')}), \'minecraft:the_end\': Compound({\'generator\': Compound({\'settings\': String(\'minecraft:end\'), \'biome_source\': Compound({\'type\': String(\'minecraft:the_end\')}), \'type\': String(\'minecraft:noise\')}), \'type\': String(\'minecraft:the_end\')})})}), \'DragonFight\': Compound({\'NeedsStateScanning\': Byte(1), \'Gateways\': IntArray([Int(6), Int(17), Int(10), Int(0), Int(3), Int(1), Int(12), Int(4), Int(9), Int(18), Int(8), Int(15), Int(11), Int(13), Int(5), Int(16), Int(19), Int(14), Int(2), Int(7)]), \'DragonKilled\': Byte(0), \'PreviouslyKilled\': Byte(0)}), \'BorderSizeLerpTarget\': Double(59999968.0), \'Version\': Compound({\'Snapshot\': Byte(0), \'Series\': String(\'main\'), \'Id\': Int(3578), \'Name\': String(\'1.20.2\')}), \'DayTime\': Long(47777), \'initialized\': Byte(1), \'WasModded\': Byte(0), \'allowCommands\': Byte(0), \'WanderingTraderSpawnDelay\': Int(10800), \'CustomBossEvents\': Compound({}), \'GameRules\': Compound({\'doWardenSpawning\': String(\'true\'), \'globalSoundEvents\': String(\'true\'), \'tntExplosionDropDecay\': String(\'false\'), \'enderPearlsVanishOnDeath\': String(\'true\'), \'doFireTick\': String(\'true\'), \'maxCommandChainLength\': String(\'65536\'), \'doVinesSpread\': String(\'true\'), \'fireDamage\': String(\'true\'), \'reducedDebugInfo\': String(\'false\'), \'waterSourceConversion\': String(\'true\'), \'disableElytraMovementCheck\': String(\'false\'), \'lavaSourceConversion\': String(\'false\'), \'announceAdvancements\': String(\'true\'), \'drowningDamage\': String(\'true\'), \'commandBlockOutput\': String(\'true\'), \'forgiveDeadPlayers\': String(\'true\'), \'doMobSpawning\': String(\'true\'), \'maxEntityCramming\': String(\'24\'), \'disableRaids\': String(\'false\'), \'doWeatherCycle\': String(\'true\'), \'mobExplosionDropDecay\': String(\'true\'), \'doDaylightCycle\': String(\'true\'), \'showDeathMessages\': String(\'true\'), \'doTileDrops\': String(\'true\'), \'universalAnger\': String(\'false\'), \'playersSleepingPercentage\': String(\'100\'), \'snowAccumulationHeight\': String(\'1\'), \'doInsomnia\': String(\'true\'), \'blockExplosionDropDecay\': String(\'true\'), \'doImmediateRespawn\': String(\'false\'), \'naturalRegeneration\': String(\'true\'), \'doMobLoot\': String(\'true\'), \'fallDamage\': String(\'true\'), \'keepInventory\': String(\'false\'), \'doEntityDrops\': String(\'true\'), \'doLimitedCrafting\': String(\'false\'), \'mobGriefing\': String(\'true\'), \'randomTickSpeed\': String(\'3\'), \'spawnRadius\': String(\'10\'), \'commandModificationBlockLimit\': String(\'32768\'), \'doTraderSpawning\': String(\'true\'), \'freezeDamage\': String(\'true\'), \'logAdminCommands\': String(\'true\'), \'spectatorsGenerateChunks\': String(\'true\'), \'sendCommandFeedback\': String(\'true\'), \'doPatrolSpawning\': String(\'true\')}), \'Player\': Compound({\'Brain\': Compound({\'memories\': Compound({})}), \'HurtByTimestamp\': Int(8740), \'SleepTimer\': Short(0), \'SpawnForced\': Byte(0), \'Attributes\': List[Compound]([Compound({\'Base\': Double(0.0), \'Name\': String(\'minecraft:generic.armor\')}), Compound({\'Base\': Double(4.0), \'Name\': String(\'minecraft:generic.attack_speed\')}), Compound({\'Base\': Double(0.0), \'Name\': String(\'minecraft:generic.armor_toughness\')}), Compound({\'Base\': Double(1.0), \'Name\': String(\'minecraft:generic.attack_damage\')}), Compound({\'Base\': Double(0.10000000149011612), \'Name\': String(\'minecraft:generic.movement_speed\')})]), \'Invulnerable\': Byte(0), \'FallFlying\': Byte(0), \'PortalCooldown\': Int(0), \'AbsorptionAmount\': Float(0.0), \'abilities\': Compound({\'invulnerable\': Byte(0), \'mayfly\': Byte(0), \'instabuild\': Byte(0), \'walkSpeed\': Float(0.10000000149011612), \'mayBuild\': Byte(1), \'flying\': Byte(0), \'flySpeed\': Float(0.05000000074505806)}), \'FallDistance\': Float(0.0), \'active_effects\': List[Compound]([Compound({\'duration\': Int(-1), \'show_icon\': Byte(0), \'amplifier\': Byte(1), \'ambient\': Byte(0), \'id\': String(\'minecraft:resistance\'), \'show_particles\': Byte(0)}), Compound({\'duration\': Int(-1), \'show_icon\': Byte(0), \'amplifier\': Byte(1), \'ambient\': Byte(0), \'id\': String(\'minecraft:regeneration\'), \'show_particles\': Byte(0)})]), \'recipeBook\': Compound({\'recipes\': List[String]([String(\'minecraft:bread\'), String(\'minecraft:mangrove_boat\'), String(\'minecraft:chest\'), String(\'minecraft:wooden_pickaxe\'), String(\'minecraft:torch\'), String(\'minecraft:charcoal\'), String(\'minecraft:acacia_boat\'), String(\'minecraft:stone_hoe\'), String(\'minecraft:diorite_wall_from_diorite_stonecutting\'), String(\'minecraft:jungle_boat\'), String(\'minecraft:light_gray_carpet\'), String(\'minecraft:white_banner\'), String(\'minecraft:nether_brick_wall_from_nether_bricks_stonecutting\'), String(\'minecraft:lever\'), String(\'minecraft:oak_stairs\'), String(\'minecraft:smoker\'), String(\'minecraft:light_gray_banner\'), String(\'minecraft:gold_ingot_from_gold_block\'), String(\'minecraft:stone_pickaxe\'), String(\'minecraft:light_weighted_pressure_plate\'), String(\'minecraft:golden_shovel\'), String(\'minecraft:cooked_mutton_from_campfire_cooking\'), String(\'minecraft:wooden_axe\'), String(\'minecraft:dark_oak_boat\'), String(\'minecraft:iron_ingot_from_smelting_raw_iron\'), String(\'minecraft:arrow\'), String(\'minecraft:golden_sword\'), String(\'minecraft:oak_fence_gate\'), String(\'minecraft:iron_door\'), String(\'minecraft:diorite_wall\'), String(\'minecraft:shield\'), String(\'minecraft:iron_nugget\'), String(\'minecraft:white_carpet\'), String(\'minecraft:golden_pickaxe\'), String(\'minecraft:bamboo_raft\'), String(\'minecraft:cooked_mutton_from_smoking\'), String(\'minecraft:cooked_porkchop_from_campfire_cooking\'), String(\'minecraft:dark_oak_chest_boat\'), String(\'minecraft:gold_nugget_from_blasting\'), String(\'minecraft:cobblestone_stairs_from_cobblestone_stonecutting\'), String(\'minecraft:painting\'), String(\'minecraft:iron_shovel\'), String(\'minecraft:ladder\'), String(\'minecraft:firework_rocket_simple\'), String(\'minecraft:diorite_stairs_from_diorite_stonecutting\'), String(\'minecraft:hopper\'), String(\'minecraft:blaze_powder\'), String(\'minecraft:smooth_basalt\'), String(\'minecraft:chain\'), String(\'minecraft:crafting_table\'), String(\'minecraft:lantern\'), String(\'minecraft:cobblestone_wall\'), String(\'minecraft:iron_leggings\'), String(\'minecraft:acacia_chest_boat\'), String(\'minecraft:gold_nugget_from_smelting\'), String(\'minecraft:target\'), String(\'minecraft:polished_diorite_slab_from_diorite_stonecutting\'), String(\'minecraft:oak_fence\'), String(\'minecraft:gold_nugget\'), String(\'minecraft:iron_bars\'), String(\'minecraft:andesite\'), String(\'minecraft:iron_boots\'), String(\'minecraft:nether_brick_wall\'), String(\'minecraft:coal_block\'), String(\'minecraft:iron_trapdoor\'), String(\'minecraft:cake\'), String(\'minecraft:polished_basalt_from_basalt_stonecutting\'), String(\'minecraft:golden_chestplate\'), String(\'minecraft:iron_helmet\'), String(\'minecraft:cherry_boat\'), String(\'minecraft:stick\'), String(\'minecraft:iron_nugget_from_smelting\'), String(\'minecraft:chiseled_nether_bricks_from_nether_bricks_stonecutting\'), String(\'minecraft:oak_sign\'), String(\'minecraft:brewing_stand\'), String(\'minecraft:furnace\'), String(\'minecraft:iron_block\'), String(\'minecraft:nether_brick_slab_from_nether_bricks_stonecutting\'), String(\'minecraft:polished_diorite\'), String(\'minecraft:diorite_stairs\'), String(\'minecraft:cooked_porkchop\'), String(\'minecraft:oak_trapdoor\'), String(\'minecraft:cracked_nether_bricks\'), String(\'minecraft:oak_door\'), String(\'minecraft:cooked_porkchop_from_smoking\'), String(\'minecraft:stone_axe\'), String(\'minecraft:oak_wood\'), String(\'minecraft:tnt\'), String(\'minecraft:golden_apple\'), String(\'minecraft:barrel\'), String(\'minecraft:stone\'), String(\'minecraft:nether_brick\'), String(\'minecraft:light_gray_bed\'), String(\'minecraft:oak_planks\'), String(\'minecraft:wooden_sword\'), String(\'minecraft:flint_and_steel\'), String(\'minecraft:bone_meal\'), String(\'minecraft:nether_brick_stairs\'), String(\'minecraft:cherry_chest_boat\'), String(\'minecraft:iron_nugget_from_blasting\'), String(\'minecraft:jungle_chest_boat\'), String(\'minecraft:diorite_slab\'), String(\'minecraft:polished_diorite_stairs_from_diorite_stonecutting\'), String(\'minecraft:iron_sword\'), String(\'minecraft:crossbow\'), String(\'minecraft:iron_chestplate\'), String(\'minecraft:bamboo_chest_raft\'), String(\'minecraft:iron_pickaxe\'), String(\'minecraft:wooden_shovel\'), String(\'minecraft:fletching_table\'), String(\'minecraft:nether_brick_fence\'), String(\'minecraft:smithing_table\'), String(\'minecraft:polished_diorite_from_diorite_stonecutting\'), String(\'minecraft:spruce_chest_boat\'), String(\'minecraft:nether_brick_slab\'), String(\'minecraft:cooked_mutton\'), String(\'minecraft:cauldron\'), String(\'minecraft:heavy_weighted_pressure_plate\'), String(\'minecraft:stone_shovel\'), String(\'minecraft:cobblestone_stairs\'), String(\'minecraft:cobblestone_wall_from_cobblestone_stonecutting\'), String(\'minecraft:golden_leggings\'), String(\'minecraft:iron_ingot_from_blasting_raw_iron\'), String(\'minecraft:oak_chest_boat\'), String(\'minecraft:golden_axe\'), String(\'minecraft:raw_iron_block\'), String(\'minecraft:enchanting_table\'), String(\'minecraft:oak_button\'), String(\'minecraft:birch_boat\'), String(\'minecraft:spruce_boat\'), String(\'minecraft:gold_block\'), String(\'minecraft:wooden_hoe\'), String(\'minecraft:red_dye_from_poppy\'), String(\'minecraft:nether_brick_stairs_from_nether_bricks_stonecutting\'), String(\'minecraft:birch_chest_boat\'), String(\'minecraft:shears\'), String(\'minecraft:wheat\'), String(\'minecraft:oak_pressure_plate\'), String(\'minecraft:campfire\'), String(\'minecraft:stone_sword\'), String(\'minecraft:hay_block\'), String(\'minecraft:golden_boots\'), String(\'minecraft:iron_axe\'), String(\'minecraft:cobblestone_slab\'), String(\'minecraft:diorite_slab_from_diorite_stonecutting\'), String(\'minecraft:oak_slab\'), String(\'minecraft:white_bed\'), String(\'minecraft:polished_basalt\'), String(\'minecraft:mangrove_chest_boat\'), String(\'minecraft:iron_hoe\'), String(\'minecraft:golden_helmet\'), String(\'minecraft:minecart\'), String(\'minecraft:cobblestone_slab_from_cobblestone_stonecutting\'), String(\'minecraft:oak_boat\'), String(\'minecraft:bucket\'), String(\'minecraft:golden_hoe\')]), \'isBlastingFurnaceFilteringCraftable\': Byte(0), \'isSmokerGuiOpen\': Byte(0), \'isFilteringCraftable\': Byte(0), \'toBeDisplayed\': List[String]([String(\'minecraft:bread\'), String(\'minecraft:mangrove_boat\'), String(\'minecraft:chest\'), String(\'minecraft:wooden_pickaxe\'), String(\'minecraft:torch\'), String(\'minecraft:charcoal\'), String(\'minecraft:acacia_boat\'), String(\'minecraft:stone_hoe\'), String(\'minecraft:diorite_wall_from_diorite_stonecutting\'), String(\'minecraft:jungle_boat\'), String(\'minecraft:light_gray_carpet\'), String(\'minecraft:white_banner\'), String(\'minecraft:nether_brick_wall_from_nether_bricks_stonecutting\'), String(\'minecraft:lever\'), String(\'minecraft:oak_stairs\'), String(\'minecraft:smoker\'), String(\'minecraft:light_gray_banner\'), String(\'minecraft:gold_ingot_from_gold_block\'), String(\'minecraft:stone_pickaxe\'), String(\'minecraft:light_weighted_pressure_plate\'), String(\'minecraft:golden_shovel\'), String(\'minecraft:cooked_mutton_from_campfire_cooking\'), String(\'minecraft:wooden_axe\'), String(\'minecraft:dark_oak_boat\'), String(\'minecraft:iron_ingot_from_smelting_raw_iron\'), String(\'minecraft:arrow\'), String(\'minecraft:golden_sword\'), String(\'minecraft:oak_fence_gate\'), String(\'minecraft:iron_door\'), String(\'minecraft:diorite_wall\'), String(\'minecraft:shield\'), String(\'minecraft:iron_nugget\'), String(\'minecraft:white_carpet\'), String(\'minecraft:golden_pickaxe\'), String(\'minecraft:bamboo_raft\'), String(\'minecraft:cooked_mutton_from_smoking\'), String(\'minecraft:cooked_porkchop_from_campfire_cooking\'), String(\'minecraft:dark_oak_chest_boat\'), String(\'minecraft:gold_nugget_from_blasting\'), String(\'minecraft:cobblestone_stairs_from_cobblestone_stonecutting\'), String(\'minecraft:painting\'), String(\'minecraft:iron_shovel\'), String(\'minecraft:ladder\'), String(\'minecraft:firework_rocket_simple\'), String(\'minecraft:diorite_stairs_from_diorite_stonecutting\'), String(\'minecraft:hopper\'), String(\'minecraft:blaze_powder\'), String(\'minecraft:smooth_basalt\'), String(\'minecraft:chain\'), String(\'minecraft:crafting_table\'), String(\'minecraft:lantern\'), String(\'minecraft:cobblestone_wall\'), String(\'minecraft:iron_leggings\'), String(\'minecraft:acacia_chest_boat\'), String(\'minecraft:gold_nugget_from_smelting\'), String(\'minecraft:target\'), String(\'minecraft:polished_diorite_slab_from_diorite_stonecutting\'), String(\'minecraft:oak_fence\'), String(\'minecraft:gold_nugget\'), String(\'minecraft:iron_bars\'), String(\'minecraft:andesite\'), String(\'minecraft:iron_boots\'), String(\'minecraft:nether_brick_wall\'), String(\'minecraft:coal_block\'), String(\'minecraft:iron_trapdoor\'), String(\'minecraft:cake\'), String(\'minecraft:polished_basalt_from_basalt_stonecutting\'), String(\'minecraft:golden_chestplate\'), String(\'minecraft:iron_helmet\'), String(\'minecraft:cherry_boat\'), String(\'minecraft:stick\'), String(\'minecraft:iron_nugget_from_smelting\'), String(\'minecraft:chiseled_nether_bricks_from_nether_bricks_stonecutting\'), String(\'minecraft:oak_sign\'), String(\'minecraft:brewing_stand\'), String(\'minecraft:furnace\'), String(\'minecraft:iron_block\'), String(\'minecraft:nether_brick_slab_from_nether_bricks_stonecutting\'), String(\'minecraft:polished_diorite\'), String(\'minecraft:diorite_stairs\'), String(\'minecraft:cooked_porkchop\'), String(\'minecraft:oak_trapdoor\'), String(\'minecraft:cracked_nether_bricks\'), String(\'minecraft:oak_door\'), String(\'minecraft:cooked_porkchop_from_smoking\'), String(\'minecraft:stone_axe\'), String(\'minecraft:oak_wood\'), String(\'minecraft:tnt\'), String(\'minecraft:golden_apple\'), String(\'minecraft:barrel\'), String(\'minecraft:stone\'), String(\'minecraft:nether_brick\'), String(\'minecraft:light_gray_bed\'), String(\'minecraft:oak_planks\'), String(\'minecraft:wooden_sword\'), String(\'minecraft:flint_and_steel\'), String(\'minecraft:bone_meal\'), String(\'minecraft:nether_brick_stairs\'), String(\'minecraft:cherry_chest_boat\'), String(\'minecraft:iron_nugget_from_blasting\'), String(\'minecraft:jungle_chest_boat\'), String(\'minecraft:diorite_slab\'), String(\'minecraft:polished_diorite_stairs_from_diorite_stonecutting\'), String(\'minecraft:iron_sword\'), String(\'minecraft:crossbow\'), String(\'minecraft:iron_chestplate\'), String(\'minecraft:bamboo_chest_raft\'), String(\'minecraft:iron_pickaxe\'), String(\'minecraft:wooden_shovel\'), String(\'minecraft:fletching_table\'), String(\'minecraft:nether_brick_fence\'), String(\'minecraft:smithing_table\'), String(\'minecraft:polished_diorite_from_diorite_stonecutting\'), String(\'minecraft:spruce_chest_boat\'), String(\'minecraft:nether_brick_slab\'), String(\'minecraft:cooked_mutton\'), String(\'minecraft:cauldron\'), String(\'minecraft:heavy_weighted_pressure_plate\'), String(\'minecraft:stone_shovel\'), String(\'minecraft:cobblestone_stairs\'), String(\'minecraft:cobblestone_wall_from_cobblestone_stonecutting\'), String(\'minecraft:golden_leggings\'), String(\'minecraft:iron_ingot_from_blasting_raw_iron\'), String(\'minecraft:oak_chest_boat\'), String(\'minecraft:golden_axe\'), String(\'minecraft:raw_iron_block\'), String(\'minecraft:enchanting_table\'), String(\'minecraft:oak_button\'), String(\'minecraft:birch_boat\'), String(\'minecraft:spruce_boat\'), String(\'minecraft:gold_block\'), String(\'minecraft:wooden_hoe\'), String(\'minecraft:red_dye_from_poppy\'), String(\'minecraft:nether_brick_stairs_from_nether_bricks_stonecutting\'), String(\'minecraft:birch_chest_boat\'), String(\'minecraft:shears\'), String(\'minecraft:wheat\'), String(\'minecraft:oak_pressure_plate\'), String(\'minecraft:campfire\'), String(\'minecraft:stone_sword\'), String(\'minecraft:hay_block\'), String(\'minecraft:golden_boots\'), String(\'minecraft:iron_axe\'), String(\'minecraft:cobblestone_slab\'), String(\'minecraft:diorite_slab_from_diorite_stonecutting\'), String(\'minecraft:oak_slab\'), String(\'minecraft:white_bed\'), String(\'minecraft:polished_basalt\'), String(\'minecraft:mangrove_chest_boat\'), String(\'minecraft:iron_hoe\'), String(\'minecraft:golden_helmet\'), String(\'minecraft:minecart\'), String(\'minecraft:cobblestone_slab_from_cobblestone_stonecutting\'), String(\'minecraft:oak_boat\'), String(\'minecraft:bucket\'), String(\'minecraft:golden_hoe\')]), \'isFurnaceGuiOpen\': Byte(0), \'isGuiOpen\': Byte(0), \'isFurnaceFilteringCraftable\': Byte(0), \'isBlastingFurnaceGuiOpen\': Byte(0), \'isSmokerFilteringCraftable\': Byte(0)}), \'DeathTime\': Short(0), \'XpSeed\': Int(0), \'XpTotal\': Int(175), \'UUID\': IntArray([Int(383564073), Int(-1301197389), Int(-1664744038), Int(-2061513503)]), \'playerGameType\': Int(0), \'SpawnDimension\': String(\'minecraft:overworld\'), \'seenCredits\': Byte(0), \'enteredNetherPosition\': Compound({\'x\': Double(85.97102978042051), \'y\': Double(70.0), \'z\': Double(-142.52476534538764)}), \'Motion\': List[Double]([Double(0.0), Double(-0.0784000015258789), Double(0.0)]), \'SpawnY\': Int(79), \'Health\': Float(10.199999809265137), \'SpawnZ\': Int(-165), \'foodSaturationLevel\': Float(6.0), \'SpawnX\': Int(97), \'Air\': Short(300), \'OnGround\': Byte(1), \'Dimension\': String(\'minecraft:the_nether\'), \'SpawnAngle\': Float(-110.582275390625), \'Rotation\': List[Float]([Float(167.5365753173828), Float(45.599910736083984)]), \'XpLevel\': Int(10), \'warden_spawn_tracker\': Compound({\'warning_level\': Int(0), \'ticks_since_last_warning\': Int(2187), \'cooldown_ticks\': Int(0)}), \'Score\': Int(175), \'Pos\': List[Double]([Double(35.95043960452756), Double(38.0), Double(-196.30000001192093)]), \'Fire\': Short(-20), \'XpP\': Float(0.5555554628372192), \'EnderItems\': List([]), \'DataVersion\': Int(3578), \'foodLevel\': Int(12), \'foodExhaustionLevel\': Float(1.9010030031204224), \'HurtTime\': Short(0), \'SelectedItemSlot\': Int(2), \'Inventory\': List[Compound]([Compound({\'Slot\': Byte(0), \'id\': String(\'minecraft:iron_pickaxe\'), \'Count\': Byte(1), \'tag\': Compound({\'Damage\': Int(8)})}), Compound({\'Slot\': Byte(1), \'id\': String(\'minecraft:bone\'), \'Count\': Byte(2)}), Compound({\'Slot\': Byte(2), \'id\': String(\'minecraft:bread\'), \'Count\': Byte(9)}), Compound({\'Slot\': Byte(3), \'id\': String(\'minecraft:white_wool\'), \'Count\': Byte(1)}), Compound({\'Slot\': Byte(4), \'id\': String(\'minecraft:light_gray_wool\'), \'Count\': Byte(1)}), Compound({\'Slot\': Byte(5), \'id\': String(\'minecraft:ender_pearl\'), \'Count\': Byte(1)}), Compound({\'Slot\': Byte(6), \'id\': String(\'minecraft:golden_shovel\'), \'Count\': Byte(1), \'tag\': Compound({\'Damage\': Int(0), \'Enchantments\': List[Compound]([Compound({\'lvl\': Short(1), \'id\': String(\'minecraft:silk_touch\')})])})}), Compound({\'Slot\': Byte(7), \'id\': String(\'minecraft:iron_axe\'), \'Count\': Byte(1), \'tag\': Compound({\'Damage\': Int(84)})}), Compound({\'Slot\': Byte(8), \'id\': String(\'minecraft:hay_block\'), \'Count\': Byte(6)}), Compound({\'Slot\': Byte(9), \'id\': String(\'minecraft:nether_bricks\'), \'Count\': Byte(3)}), Compound({\'Slot\': Byte(10), \'id\': String(\'minecraft:obsidian\'), \'Count\': Byte(2)}), Compound({\'Slot\': Byte(11), \'id\': String(\'minecraft:porkchop\'), \'Count\': Byte(3)}), Compound({\'Slot\': Byte(12), \'id\': String(\'minecraft:diorite\'), \'Count\': Byte(1)}), Compound({\'Slot\': Byte(13), \'id\': String(\'minecraft:cooked_mutton\'), \'Count\': Byte(5)}), Compound({\'Slot\': Byte(14), \'id\': String(\'minecraft:oak_planks\'), \'Count\': Byte(3)}), Compound({\'Slot\': Byte(16), \'id\': String(\'minecraft:nether_brick_fence\'), \'Count\': Byte(1)}), Compound({\'Slot\': Byte(17), \'id\': String(\'minecraft:oak_sapling\'), \'Count\': Byte(5)}), Compound({\'Slot\': Byte(18), \'id\': String(\'minecraft:flint_and_steel\'), \'Count\': Byte(1), \'tag\': Compound({\'Damage\': Int(1)})}), Compound({\'Slot\': Byte(19), \'id\': String(\'minecraft:oak_boat\'), \'Count\': Byte(1)}), Compound({\'Slot\': Byte(20), \'id\': String(\'minecraft:blaze_rod\'), \'Count\': Byte(17)}), Compound({\'Slot\': Byte(21), \'id\': String(\'minecraft:water_bucket\'), \'Count\': Byte(1)}), Compound({\'Slot\': Byte(22), \'id\': String(\'minecraft:cobblestone\'), \'Count\': Byte(1)}), Compound({\'Slot\': Byte(23), \'id\': String(\'minecraft:egg\'), \'Count\': Byte(1)}), Compound({\'Slot\': Byte(24), \'id\': String(\'minecraft:torch\'), \'Count\': Byte(5)}), Compound({\'Slot\': Byte(25), \'id\': String(\'minecraft:white_bed\'), \'Count\': Byte(1)}), Compound({\'Slot\': Byte(26), \'id\': String(\'minecraft:mutton\'), \'Count\': Byte(2)}), Compound({\'Slot\': Byte(27), \'id\': String(\'minecraft:stick\'), \'Count\': Byte(3)}), Compound({\'Slot\': Byte(28), \'id\': String(\'minecraft:stone_axe\'), \'Count\': Byte(1), \'tag\': Compound({\'Damage\': Int(100)})}), Compound({\'Slot\': Byte(29), \'id\': String(\'minecraft:poppy\'), \'Count\': Byte(2)}), Compound({\'Slot\': Byte(30), \'id\': String(\'minecraft:iron_ingot\'), \'Count\': Byte(1)}), Compound({\'Slot\': Byte(32), \'id\': String(\'minecraft:flint\'), \'Count\': Byte(3)}), Compound({\'Slot\': Byte(34), \'id\': String(\'minecraft:wheat_seeds\'), \'Count\': Byte(2)}), Compound({\'Slot\': Byte(101), \'id\': String(\'minecraft:iron_leggings\'), \'Count\': Byte(1), \'tag\': Compound({\'Damage\': Int(33)})}), Compound({\'Slot\': Byte(102), \'id\': String(\'minecraft:iron_chestplate\'), \'Count\': Byte(1), \'tag\': Compound({\'Damage\': Int(33)})}), Compound({\'Slot\': Byte(-106), \'id\': String(\'minecraft:shield\'), \'Count\': Byte(1), \'tag\': Compound({\'Damage\': Int(141)})})]), \'LastDeathLocation\': Compound({\'pos\': IntArray([Int(-202), Int(76), Int(276)]), \'dimension\': String(\'minecraft:the_nether\')}), \'foodTickTimer\': Int(0)}), \'SpawnY\': Int(68), \'rainTime\': Int(77965), \'thunderTime\': Int(111543), \'SpawnZ\': Int(0), \'hardcore\': Byte(0), \'DifficultyLocked\': Byte(0), \'SpawnX\': Int(0), \'clearWeatherTime\': Int(0), \'thundering\': Byte(0), \'SpawnAngle\': Float(0.0), \'version\': Int(19133), \'BorderSafeZone\': Double(5.0), \'LastPlayed\': Long(1712843567947), \'BorderWarningTime\': Double(15.0), \'ScheduledEvents\': List([]), \'LevelName\': String(\'speedrun\'), \'BorderSize\': Double(59999968.0), \'DataVersion\': Int(3578), \'DataPacks\': Compound({\'Disabled\': List[String]([String(\'bundle\'), String(\'trade_rebalance\')]), \'Enabled\': List[String]([String(\'vanilla\')])})})}",\n    "tests/test.py": \'from libs import mojangapi as mojang\\n\\naccount_checker = mojang.Accounts()\\nprint(account_checker.check("EletrixTime"))\',\n    "tests/test2.py": \'import socket\\nimport struct\\nimport json\\n\\ndef unpack_varint(s):\\n    d = 0\\n    for i in range(5):\\n        b = ord(s.recv(1))\\n        d |= (b & 0x7F) << 7*i\\n        if not b & 0x80:\\n            break\\n    return d\\n\\ndef pack_varint(d: int):\\n    o = b""\\n    while True:\\n        b = d & 0x7F\\n        d >>= 7\\n        o += struct.pack("B", b | (0x80 if d > 0 else 0))\\n        if d == 0:\\n            break\\n    return o\\n\\ndef pack_data(d):\\n    h = pack_varint(len(d))\\n    if type(d) == str:\\n        d = bytes(d, "utf-8")\\n    return h + d\\n\\n\\ndef pack_port(i):\\n    return struct.pack(\\\'>H\\\', i)\\n\\n\\ndef get_info(host=\\\'localhost\\\', port=25565):\\n\\n    # Connect\\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\\n    s.connect((host, port))\\n\\n    # Send handshake + status request\\n    s.send(pack_data(b"\\\\x00\\\\x00" + pack_data(host.encode(\\\'utf8\\\')) + pack_port(port) + b"\\\\x01"))\\n    s.send(pack_data("\\\\x00"))\\n\\n    # Read response\\n    print(f"Packet lenth : {unpack_varint(s)}")     # Packet length\\n    print(f"Packet ID : {unpack_varint(s)}")     # Packet ID\\n    l = unpack_varint(s)  # String length\\n    print(f"String lenth : {l}")\\n\\n    d = b""\\n    while len(d) < l:\\n        d += s.recv(1024)\\n\\n    # Close our socket\\n    s.close()\\n\\n    # Load json and return\\n    print(d)\\n    return json.loads(d.decode(\\\'utf-8\\\'))\\n\\n\\ndef get_info2(host=\\\'localhost\\\', port=25565):\\n    # Connect\\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\\n    s.connect((host, port))\\n\\n    # Send handshake + status request\\n    s.send(pack_data(b"\\\\x00\\\\x00" + pack_data(host.encode(\\\'utf8\\\')) + pack_port(port) + b"\\\\x02"))\\n    #s.send(pack_data("\\\\x00"))\\n\\n    a = s.recv(10000)\\n    \\n    return f"{len(a)} --> {a}"\\n\\n\\nprint(get_info2(host="localhost", port=25565))\\n\',\n    "tests/test_workflow.py": \'def test_app():\\n    # check if eula is not accepted in the build, to prevent starting the server without accepting it.\\n    with open("eula.txt", "r") as eula_file:\\n        eula = eula_file.read().split()\\n        if "eula=true" in eula:\\n            raise RuntimeError("Eula is accepted by default, change eula to false in eula.txt to continue.")\\n\\n    # agree EULA (neutralized to prevent fail)\\n    # with open("eula.txt", "w") as ef:\\n    #  ef.write("eula=true")\\n\\n    # start the server\\n    import os\\n    os.system("python main.py")\\n\',\n    "utils/locale/en_us.json": \'{\\n    "disconnect.whitelist": "You are not whitelisted on this server", \\n    "disconnect.ban.account": "Your account was banned: {reason}",\\n    "disconnect.ban.ip": "Your IP was banned: {reason}",\\n    "disconnect.username.conflict.online": "You are already connected", \\n    "disconnect.username.conflict.offline.sameip": "You are already connected",\\n    "disconnect.username.conflict.offline.dif_ip": "Possible identity theft, please conctact an administrator.",\\n    "disconnect.server.closed": "Server closed",\\n    "disconnect.server.restart": "Server is restarting", \\n    "disconnect.server.crash": "The server crashed. Please contact an administrator",\\n    "disconnect.server.error": "Internal exception, please contact an administrator", \\n    "disconnect.login.failed": "Failed to login",\\n    "disconnect.full": "Server full",\\n    "disconnect.default": "Disconnected", \\n    "disconnect.version.outdated.server": "Server is outdated ! Please connect using {0}", \\n    "disconnect.version.outdated.client": "Client is outdated ! Please connect using {0}"\\n}\\n\',\n    "utils/locale/es.json": \'{\\n    "disconnect.whitelist": "No estás en la lista blanca de este servidor",\\n    "disconnect.ban.account": "Tu cuenta ha sido baneada: {reason}",\\n    "disconnect.ban.ip": "Tu IP ha sido baneada: {reason}",\\n    "disconnect.username.conflict.online": "Ya estás conectado",\\n    "disconnect.username.conflict.offline.sameip": "Ya estás conectado",\\n    "disconnect.username.conflict.offline.dif_ip": "Posible suplantación de identidad, por favor contacta a un administrador.",\\n    "disconnect.server.closed": "Servidor cerrado",\\n    "disconnect.server.restart": "El servidor se está reiniciando",\\n    "disconnect.server.crash": "El servidor se ha caído. Por favor contacta a un administrador",\\n    "disconnect.server.error": "Excepción interna, por favor contacta a un administrador",\\n    "disconnect.login.failed": "Error al iniciar sesión",\\n    "disconnect.full": "Servidor lleno",\\n    "disconnect.default": "Desconectado", \\n    "disconnect.version.outdated.server": "¡El servidor está desactualizado! Por favor, conéctese usando {0}", \\n    "disconnect.version.outdated.client": "¡El cliente está desactualizado! Por favor, conéctese usando {0}"\\n}\\n\',\n    "utils/locale/fr_fr.json": \'{\\n    "disconnect.whitelist": "Vous n\\\'êtes pas sur la liste blanche de ce serveur",\\n    "disconnect.ban.account": "Votre compte a été banni : {reason}",\\n    "disconnect.ban.ip": "Votre IP a été bannie : {reason}",\\n    "disconnect.username.conflict.online": "Vous êtes déjà connecté",\\n    "disconnect.username.conflict.offline.sameip": "Vous êtes déjà connecté",\\n    "disconnect.username.conflict.offline.dif_ip": "Usurpation d\\\'identité possible, veuillez contacter un administrateur.",\\n    "disconnect.server.closed": "Serveur fermé",\\n    "disconnect.server.restart": "Le serveur redémarre",\\n    "disconnect.server.crash": "Le serveur a planté. Veuillez contacter un administrateur",\\n    "disconnect.server.error": "Exception interne, veuillez contacter un administrateur",\\n    "disconnect.login.failed": "Échec de la connexion",\\n    "disconnect.full": "Serveur plein",\\n    "disconnect.default": "Déconnecté", \\n    "disconnect.version.outdated.server": "Le serveur est obsolète, merci de vous connecter en {0}", \\n    "disconnect.version.outdated.client": "Le serveur est dans une version supérieur à la votre, merci de vous connecter en {0}"\\n}\\n\',\n}\n'

# Check structure
FILES_TO_CHECK = ['banned-ips.json', 'banned-players.json', 'config.json', 'eula.txt', 'LICENSE.md', 'main.py', 'ops.json', 'pluginapi.py', 'README.md', 'requirements.txt', 'SECURITY.md', 'server-icon.png', 'whitelist.json', 'libs/crash_gen.py', 'libs/mojangapi.py', 'libs/cryptography_system/system.py', 'libs/requests/authcheck.json', 'src/entities/entity.py', 'src/events/event.py', 'src/events/manager.py', 'src/registry/blocks.py', 'src/registry/entities.py', 'src/registry/registry.py', 'tests/nbtfiletest', 'tests/test.py', 'tests/test2.py', 'tests/test_workflow.py', 'utils/locale/en_us.json', 'utils/locale/es.json', 'utils/locale/fr_fr.json']

FOLDERS_TO_CHECK = ['crash_reports', 'libs', 'libs/cryptography_system', 'libs/requests', 'logs', 'src', 'src/entities', 'src/events', 'src/registry', 'tests', 'utils', 'utils/locale']

state = "_DEFAULT"
missing_files = []
missing_folders = []
i = 0
j = 0

def install():
    for d in missing_folders:
        os.makedirs(d, exist_ok=True)
    for f in missing_files:
        with open(f, "w", encoding="utf-8") as fobj:
            fobj.write(eval(dico)[f])

for file in FILES_TO_CHECK:
    if not os.path.exists(file):
        if state == "_DEFAULT":
            state = "_FILE_MISSING"
        i += 1
        missing_files.append(file)

for folder in FOLDERS_TO_CHECK:
    if not os.path.exists(folder):
        if state == "_FILE_MISSING":
            state = "_FILE_AND_FOLDER_MISSING"
        if state == "_DEFAULT":
            state = "_FOLDER_MISSING"
        j += 1
        missing_folders.append(folder)

if state == "_FILE_MISSING":
    print("---------------------------------")
    print("WARNING : SOME FILES ARE MISSING !")
    print("PLEASE REDOWNLOAD THE SERVER via our GitHub page : https://github.com/BeaconMCDev/BeaconMC/releases")
    print("---------------------------------")
    print(f"Missing files : {i} (list bellow)")
    print(missing_files)
    print("---------------------------------")
elif state == "_FOLDER_MISSING":
    print("WARNING : SOME FOLDERS ARE MISSING !")
    print("PLEASE REDOWNLOAD THE SERVER via our GitHub page : https://github.com/BeaconMCDev/BeaconMC/releases")
    print(f"Missing folders : {j} (list bellow)")
    print(missing_folders)
elif state == "_FILE_AND_FOLDER_MISSING":
    print("WARNING : SOME FILES AND FOLDER ARE MISSING !")
    print("PLEASE REDOWNLOAD THE SERVER via our GitHub page : https://github.com/BeaconMCDev/BeaconMC/releases")
    print(f"Missing files : {i} (list bellow)")
    print(missing_files)
    print(f"Missing folders : {j} (list bellow)")
    print(missing_folders)

if state != "_DEFAULT":
    resp = input("Do you want to make this operation automatically ? You will not need to restart this script once it will be done. (y/n)\n-> ")
    if resp.lower() == "y":
        print("Installing...")
        install()
        print("Done.")
    else:
        print("Process is terminating.")
        raise SystemExit(-1)

# Check requirements
list_rq = []
if os.path.exists("requirements.txt"):
    with open("requirements.txt", "r", encoding="utf-8") as rf:
        list_rq = [ln.strip() for ln in rf if ln.strip()]

# start
with open("main.py", "r", encoding="utf-8") as f:
    code = f.read()
exec(compile(code, 'main.py', 'exec'), {"__name__": "__start__"})
